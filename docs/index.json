[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "satviz/.external-ecmascript.js",
    "static": true,
    "longname": "satviz/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "satviz/App.js",
    "content": "/** \r\n *  @fileOverview Default class for Satviz application. \r\n *\r\n *  @author       Vojtěch Pospíšil\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport React, { Component } from 'react';\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    TextInput,\r\n    View,\r\n    Dimensions,\r\n    Button,\r\n    TouchableWithoutFeedback,\r\n    TouchableOpacity,\r\n    FlatList,\r\n    ScrollView,\r\n} from 'react-native';\r\n\r\nimport {\r\n    ViroARSceneNavigator\r\n} from 'react-viro';\r\n\r\nimport SlidingPanel from 'react-native-sliding-up-down-panels';\r\nimport SectionedMultiSelect from 'react-native-sectioned-multi-select';\r\nimport Modal from \"react-native-modal\";\r\nimport IconF from 'react-native-vector-icons/Feather';\r\nimport IconM from 'react-native-vector-icons/MaterialIcons'\r\nimport Icon from 'react-native-vector-icons/Fontisto';\r\nimport Slider from '@react-native-community/slider';\r\n\r\nimport FlashMessage from \"react-native-flash-message\";\r\nimport { showMessage, hideMessage } from \"react-native-flash-message\";\r\n\r\nimport CustomInfoModal from './js/components/CustomInfoModal';\r\n\r\nimport CoordConverter from './utils/coordsConverter'\r\n\r\nimport * as satelliteSelectItems from './js/res/selectCategories.json';\r\nimport * as groundSegmentSelectItems from './js/res/selectGroundSegment.json';\r\n\r\n\r\nlet InitialARScene = require('./js/ARScene');\r\n\r\n/**\r\n * Default class of Satviz application.\r\n */\r\nexport default class satviz extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Reference to text input for manual satellite selection\r\n         * @type {React.RefObject<any>} */\r\n        this.manualSatSelectTextInput = React.createRef();\r\n\r\n        this.state = {\r\n            /** Selected satellite IDs from satellite multislect\r\n             *  @type {Array.<string>} */\r\n            selectedItems: [],\r\n            /** Indication of reaching maximum of selcted items in select \r\n             * @type {boolean} */\r\n            maxItems: false,\r\n\r\n            /** Selected satellite IDs from manual select \r\n             * @type {Array.<string>} */\r\n            selectedItemsManual: [],\r\n\r\n            /** Selected GPS ground segment IDS from GS multiselect \r\n             * @type {Array.<string>} */\r\n            selectedItemsGroundSegment: [],\r\n\r\n            /** Visibility of help modal window \r\n             * @type {boolean} */\r\n            helpModalVisible: false,\r\n\r\n            /** Visibility of satellite info modal (CustomInfoModal) \r\n             * @type {boolean} */\r\n            satelliteModalVisible: false,\r\n            /** Selected satellite which info is displayed in info modal \r\n             * @type {SatelliteObject} */\r\n            satelliteModalSatellite: null,\r\n\r\n            /** IDs of satellites with enabled orbit rendering \r\n             * @type {Array.<string>} */\r\n            orbitIDs: [],\r\n            /** Opacity of orbit line (0 = 100% transparent) \r\n             * @type {number} */\r\n            orbitOpacity: 0.8,\r\n\r\n            /** Visibility of GPS ground segment information modal \r\n             * @type {boolean}*/\r\n            groundSegmentModalVisible: false,\r\n\r\n            /** Visibility of sliding panel \r\n             * @type {boolean} */\r\n            slidingPanelToggled: false,\r\n            /** Text of toggle part of sliding panel \r\n             * @type {string} */\r\n            slidingPanelText: \"Click to reveal satellite selection!\",\r\n\r\n            /** Value of time speed slider\r\n             * @type {number} */\r\n            timeSpeedSliderValue: 1,\r\n        };\r\n\r\n        /** Timeout for opacity slider \r\n         * @type {any} */\r\n        this.opacitySliderTimeout;\r\n\r\n        /** Maximum number of selected items in satellite multiselect \r\n         * @type {number} */\r\n        this.maxSelectedItems = 50;\r\n    }\r\n\r\n    /**\r\n     * Callback for change in satellite multiselect selected items.\r\n     * \r\n     * @param {Array.<string>} selectedItems IDs of selected items in multiselect\r\n     */\r\n    onSatelliteSelectedItemsChange = (selectedItems) => {\r\n        if (selectedItems.length >= this.maxSelectedItems) {\r\n            if (selectedItems.length === this.maxSelectedItems) {\r\n                this.setState({ selectedItems })\r\n            }\r\n\r\n            this.setState({\r\n                maxItems: true,\r\n            })\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            selectedItems,\r\n            maxItems: false,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Callback for change in ground segment multiselect selected items.\r\n     * \r\n     * @param {Array.<string>} selectedItemsGroundSegment IDs of selected items in multiselect\r\n     */\r\n    onGroundSegmentSelectedItemsChange = (selectedItemsGroundSegment) => {\r\n        this.setState({ selectedItemsGroundSegment });\r\n    };\r\n\r\n    /**\r\n     *  Change visibility of help modal\r\n     */\r\n    toggleHelpModal = () => {\r\n        this.setState({ helpModalVisible: !this.state.helpModalVisible });\r\n    };\r\n\r\n    /**\r\n     * Callback for setting satellite for satellite info modal.\r\n     * \r\n     * @param {SatelliteObject} sat Satellite to be displayed info about\r\n     */\r\n    satelliteModalSetSatelliteCallback = (sat) => {\r\n        this.setState({\r\n            satelliteModalSatellite: sat,\r\n        });\r\n\r\n        this.toggleSatelliteModal();\r\n    }\r\n\r\n    /**\r\n     * Change visibility of satellite modal.\r\n     */\r\n    toggleSatelliteModal = () => {\r\n        this.setState({\r\n            satelliteModalVisible: !this.state.satelliteModalVisible,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Change visibility of GPS ground segment modal.\r\n     */\r\n    toggleGroundSegmentModal = () => {\r\n        this.setState({\r\n            groundSegmentModalVisible: !this.state.groundSegmentModalVisible,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change visibility of sliding panel and change appropriately toggle text.\r\n     */\r\n    toggleSlidePanel = () => {\r\n        if (this.state.slidingPanelToggled) {\r\n            this.setState({ slidingPanelText: \"Click to show satellite selection!\" });\r\n        } else {\r\n            this.setState({ slidingPanelText: \"Click to hide satellite selection!\" });\r\n        }\r\n\r\n        this.setState({ slidingPanelToggled: !this.state.slidingPanelToggled });\r\n    };\r\n\r\n    /**\r\n     * Adds satellite manually with ID in manualSatSelectTextInput.\r\n     */\r\n    addManual = () => {\r\n        if (this.state.selectedItemsManual.includes(this.manualSatSelectTextInput.current._lastNativeText) === false) {\r\n            this.setState({ selectedItemsManual: [].concat(this.state.selectedItemsManual).concat(this.manualSatSelectTextInput.current._lastNativeText) });\r\n        } else {\r\n            showMessage({\r\n                message: \"Satellite with this ID is already selected!\",\r\n                type: \"danger\",\r\n            });\r\n        }\r\n\r\n        this.manualSatSelectTextInput.current.clear();\r\n    }\r\n\r\n    /**\r\n     * Removes satellite manually with given ID.\r\n     * \r\n     * @param {string} removeID ID to be removed from manualy selected IDs\r\n     */\r\n    removeManual = (removeID) => {\r\n        this.setState({ selectedItemsManual: this.state.selectedItemsManual.filter(id => id != removeID) })\r\n    }\r\n\r\n    /**\r\n     * Removes all manualy selected satellites.\r\n     */\r\n    removeManualAll = () => {\r\n        this.setState({ selectedItemsManual: [] });\r\n    }\r\n\r\n    /**\r\n     * Removes satellite with given ID from selected satellites.\r\n     * \r\n     * @param {string} satID ID of satellite to be removed\r\n     */\r\n    removeSatelliteWithError = (satID) => {\r\n        // Try to remove from selected in category\r\n        if (this.state.selectedItems.includes(satID)) {\r\n            let arr = this.state.selectedItems.filter(e => e !== satID);\r\n\r\n            this.setState({ selectedItems: arr });\r\n        }\r\n\r\n        // Try to remove from selected manually\r\n        if (this.state.selectedItemsManual.includes(satID)) {\r\n            let arr = this.state.selectedItemsManual.filter(e => e !== satID);\r\n\r\n            this.setState({ selectedItemsManual: arr });\r\n        }\r\n\r\n        showMessage({\r\n            message: \"Satellite with ID \" + satID + \" had to be removed from your selection because of internal problem with calculating its position.\",\r\n            type: \"warning\",\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get orbit status for satellite in Satellite Info Modal.\r\n     */\r\n    isOrbitEnabledForSatelliteInModal = () => {\r\n        // No sat selected protection\r\n        if (this.state.satelliteModalSatellite === null) {\r\n            return false;\r\n        }\r\n\r\n        return this.state.orbitIDs.includes(this.state.satelliteModalSatellite.id);\r\n    }\r\n\r\n    /**\r\n     * Change visibility of orbit ofsatellite with given ID.\r\n     * \r\n     * @param {string} satelliteID Satellite which orbit we want to toggle\r\n     */\r\n    toggleOrbitVisibility = (satelliteID) => {\r\n        // No sat selected protection\r\n        if (this.state.satelliteModalSatellite === null) {\r\n            return;\r\n        }\r\n\r\n        if (this.state.orbitIDs.includes(satelliteID)) {\r\n            let arr = this.state.orbitIDs.filter(id => id != satelliteID);\r\n\r\n            this.setState({\r\n                orbitIDs: arr,\r\n            });\r\n        } else {\r\n            let current = [...this.state.orbitIDs];\r\n            this.setState({\r\n                orbitIDs: [...current, satelliteID],\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders main window of the Satviz application.\r\n     * \r\n     * @returns {View} Top level View node\r\n     */\r\n    render() {\r\n        return (\r\n            <View style={styles.container}>\r\n\r\n                <ViroARSceneNavigator\r\n                    style={styles.arView}\r\n                    autofocus={true}\r\n                    shadowsEnabled={true}\r\n                    initialScene={{ scene: InitialARScene }}\r\n                    viroAppProps={{\r\n                        satelliteClickCallback: this.satelliteModalSetSatelliteCallback,\r\n                        satelliteIDs: [].concat(this.state.selectedItems).concat(this.state.selectedItemsManual),\r\n                        groundSegmentIDs: this.state.selectedItemsGroundSegment,\r\n                        orbitIDs: this.state.orbitIDs,\r\n                        orbitOpacity: this.state.orbitOpacity,\r\n                        timeScale: this.state.timeSpeedSliderValue,\r\n                        removeSatelliteCallback: this.removeSatelliteWithError,\r\n                    }}\r\n                />\r\n\r\n                <Modal\r\n                    isVisible={this.state.helpModalVisible}\r\n                    useNativeDriver={true}\r\n                    onBackdropPress={this.toggleHelpModal}\r\n                >\r\n                    <View style={styles.helpModal}>\r\n                        <TouchableOpacity onPress={this.toggleHelpModal} style={styles.modalCloseIcon}>\r\n                            <Icon name=\"close-a\" size={20} color=\"grey\" />\r\n                        </TouchableOpacity>\r\n\r\n                        <Text style={styles.helpModalHeading}>About</Text>\r\n                        <Text style={{ textAlign: 'justify' }}>This application is used to visualize satellites orbiting the Earth in augmented reality. Along with the orbit visualization, it allows the display of basic satellite information (position, speed, ...) as well as the display of positions and information regarding the terrestrial GPS segment. </Text>\r\n\r\n\r\n                        <Text style={[styles.helpModalHeading, { marginTop: 10, textAlign: 'center' }]}>How To</Text>\r\n                        <Text>1. Detect target   </Text>\r\n                        <Text style={{ textAlign: 'center' }}>2. Choose satellite or ground segment element from slide-up menu   </Text>\r\n                        <Text style={{ textAlign: 'center' }}>3. Click on satellites to get more info   </Text>\r\n\r\n\r\n                        <Text style={[styles.helpModalHeading, { marginTop: 10 }]}>Settings</Text>\r\n                        <Text>Orbit opacity: </Text>\r\n                        <Slider\r\n                            value={this.state.orbitOpacity}\r\n                            minimumValue={0}\r\n                            maximumValue={1}\r\n                            onValueChange={(val) => {\r\n                                clearTimeout(this.opacitySliderTimeout);\r\n                                this.opacitySliderTimeout = setTimeout(() => {\r\n                                    this.setState({ orbitOpacity: val })\r\n                                }, 100)\r\n                            }\r\n                            }\r\n                            style={{ width: '90%' }}\r\n                        />\r\n                    </View>\r\n                </Modal>\r\n\r\n                <TouchableOpacity onPress={this.toggleHelpModal} style={styles.modalIcon}>\r\n                    <IconM name=\"help-outline\" size={30} color=\"white\" style={styles.iconShadow} />\r\n                </TouchableOpacity>\r\n\r\n                <View style={styles.bodyViewStyle}>\r\n                    <CustomInfoModal\r\n                        satellite={this.state.satelliteModalSatellite}\r\n                        isModalVisible={this.state.satelliteModalVisible}\r\n                        closeModal={() => this.toggleSatelliteModal()}\r\n                        orbitEnabled={this.isOrbitEnabledForSatelliteInModal()}\r\n                        orbitButtonCallback={this.toggleOrbitVisibility}\r\n                    />\r\n                </View>\r\n\r\n                <SlidingPanel\r\n                    headerLayoutHeight={50}\r\n                    onAnimationStop={this.toggleSlidePanel}\r\n                    headerLayout={() =>\r\n                        <View style={styles.headerLayoutStyle}>\r\n                            <Text style={styles.commonTextStyle}>{this.state.slidingPanelText}</Text>\r\n                        </View>\r\n                    }\r\n                    allowDragging={true}\r\n                    slidingPanelLayout={() =>\r\n                        <View style={styles.slidingPanelLayoutStyle}>\r\n                            <View style={{ flex: 1 }}>\r\n                                <ScrollView style={{ flex: 1 }}>\r\n                                    <View style={{ flex: 1, justifyContent: 'center' }}>\r\n                                        <SectionedMultiSelect\r\n                                            items={satelliteSelectItems.default}\r\n                                            uniqueKey=\"id\"\r\n                                            subKey=\"children\"\r\n                                            selectText=\"Choose from catogories..\"\r\n                                            showDropDowns={true}\r\n                                            readOnlyHeadings={false}\r\n                                            selectChildren={true}\r\n                                            showRemoveAll={true}\r\n                                            onSelectedItemsChange={this.onSatelliteSelectedItemsChange}\r\n                                            selectedItems={this.state.selectedItems}\r\n                                            confirmText={`${this.state.maxItems ? 'Max satellites selected' : 'Confirm'}`}\r\n                                        />\r\n                                    </View>\r\n\r\n                                    <View style={[styles.hairlineSplitLine]} />\r\n\r\n                                    <View\r\n                                        style={{\r\n                                            flex: 1,\r\n                                            flexDirection: 'row',\r\n                                            flexWrap: 'wrap',\r\n                                            alignItems: 'center',\r\n                                            marginVertical: 10,\r\n                                        }}\r\n                                    >\r\n                                        <TextInput\r\n                                            style={{\r\n                                                height: 40,\r\n                                                width: '70%',\r\n                                                paddingLeft: '3%',\r\n                                            }}\r\n                                            placeholder=\"Choose by typing satellite ID\"\r\n                                            ref={this.manualSatSelectTextInput}\r\n                                            keyboardType='numeric'\r\n                                            value={this.state.text}\r\n                                        />\r\n                                        <View style={{ width: '20%' }}>\r\n                                            <Button title=\"Add!\" onPress={this.addManual} />\r\n                                        </View>\r\n                                    </View>\r\n\r\n                                    <View\r\n                                        style={{\r\n                                            flexWrap: 'wrap',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'flex-start',\r\n                                            flexDirection: 'row',\r\n                                        }}\r\n                                    >\r\n                                        {\r\n                                            this.state.selectedItemsManual.length > 1 ? (\r\n                                                <View\r\n                                                    style={{\r\n                                                        overflow: 'hidden',\r\n                                                        justifyContent: 'center',\r\n                                                        height: 34,\r\n                                                        borderColor: colors.selectedBubble,\r\n                                                        flexDirection: 'row',\r\n                                                        alignItems: 'center',\r\n                                                        paddingLeft: 10,\r\n                                                        margin: 3,\r\n                                                        paddingTop: 0,\r\n                                                        paddingRight: 10,\r\n                                                        paddingBottom: 0,\r\n                                                        borderRadius: 20,\r\n                                                        borderWidth: 1,\r\n                                                    }}\r\n                                                >\r\n                                                    <TouchableOpacity\r\n                                                        onPress={() => {\r\n                                                            this.removeManualAll()\r\n                                                        }}\r\n                                                        style={{\r\n                                                            borderTopRightRadius: 20,\r\n                                                            borderBottomRightRadius: 20,\r\n                                                        }}\r\n                                                    >\r\n                                                        <Text\r\n                                                            style={{\r\n                                                                color: colors.selectedBubble,\r\n                                                                fontSize: 13,\r\n                                                                marginRight: 0,\r\n                                                            }}\r\n                                                        >\r\n                                                            Remove All\r\n                                  </Text>\r\n                                                    </TouchableOpacity>\r\n                                                </View>\r\n                                            ) : null\r\n                                        }\r\n\r\n                                        {\r\n                                            this.state.selectedItemsManual.map((item, key) => (\r\n                                                <View\r\n                                                    style={{\r\n                                                        overflow: 'hidden',\r\n                                                        justifyContent: 'center',\r\n                                                        height: 34,\r\n                                                        borderWidth: 1,\r\n                                                        borderRadius: 20,\r\n                                                        borderColor: colors.selectedBubble,\r\n                                                        flexDirection: 'row',\r\n                                                        alignItems: 'center',\r\n                                                        paddingLeft: 10,\r\n                                                        margin: 3,\r\n                                                        paddingTop: 0,\r\n                                                        paddingRight: 0,\r\n                                                        paddingBottom: 0,\r\n                                                        color: colors.selectedBubble,\r\n                                                    }}\r\n                                                    key={key}\r\n                                                >\r\n                                                    <Text\r\n                                                        numberOfLines={1}\r\n                                                        style={{\r\n                                                            fontSize: 13,\r\n                                                            marginRight: 0,\r\n                                                            color: colors.selectedBubble,\r\n                                                        }}\r\n                                                    >\r\n                                                        {item}\r\n                                                    </Text>\r\n                                                    <TouchableOpacity\r\n                                                        onPress={() => this.removeManual(item)}\r\n                                                        style={{\r\n                                                            borderTopRightRadius: 20,\r\n                                                            borderBottomRightRadius: 20,\r\n                                                        }}\r\n                                                    >\r\n                                                        <IconF\r\n                                                            name=\"x\"\r\n                                                            style={{\r\n                                                                fontSize: 16,\r\n                                                                marginHorizontal: 6,\r\n                                                                marginVertical: 7,\r\n                                                                color: colors.selectedBubble,\r\n                                                            }}\r\n                                                        />\r\n                                                    </TouchableOpacity>\r\n                                                </View>\r\n                                            ))\r\n                                        }\r\n                                    </View>\r\n\r\n                                    <View style={styles.hairlineSplitLine} />\r\n\r\n                                    <View style={{ flex: 1, flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                                        <View style={{ width: '80%' }}>\r\n                                            <SectionedMultiSelect\r\n                                                items={groundSegmentSelectItems.default}\r\n                                                uniqueKey=\"id\"\r\n                                                subKey=\"children\"\r\n                                                selectText=\"Choose from ground segments...\"\r\n                                                showDropDowns={false}\r\n                                                readOnlyHeadings={true}\r\n                                                selectChildren={true}\r\n                                                // expandDropDowns={true} // causes weird bug at bottom part of screen\r\n                                                showRemoveAll={true}\r\n                                                onSelectedItemsChange={this.onGroundSegmentSelectedItemsChange}\r\n                                                selectedItems={this.state.selectedItemsGroundSegment}\r\n                                            />\r\n                                        </View>\r\n                                        <View style={{ position: 'absolute', top: 15, right: 25 }}>\r\n                                            <TouchableOpacity onPress={this.toggleGroundSegmentModal}>\r\n                                                <IconF name=\"info\" size={30} color=\"gray\" style={styles.iconShadow} />\r\n                                            </TouchableOpacity>\r\n                                        </View>\r\n                                        <View></View>\r\n                                    </View>\r\n\r\n\r\n                                    <Modal\r\n                                        isVisible={this.state.groundSegmentModalVisible}\r\n                                        useNativeDriver={true}\r\n                                        onBackdropPress={this.toggleGroundSegmentModal}\r\n                                    >\r\n                                        <View style={styles.groundSegmentModal}>\r\n                                            <View style={{ height: '93%' }}>\r\n                                                <ScrollView>\r\n                                                    <Text style={styles.groundSegmentHeading}>Master Control Stations and Alternate MCS</Text>\r\n                                                    <Text style={styles.groundSegmentColors}>Red and Gold</Text>\r\n                                                    <Text style={styles.groundSegmentText}>The master control station, located at Schriever Air Force Base in Colorado Springs, Colorado, is responsible for overall management of the remote monitoring and transmission sites. GPS ephemeris being a tabulation of computed positions, velocities and derived right ascension and declination of GPS satellites at specific times, replace \"position\" with \"ephemeris\" because the Master Control Station computes not only position but also velocity, right ascension and declination parameters for eventual upload to GPS satellites.</Text>\r\n\r\n                                                    <Text style={[styles.groundSegmentHeading, { marginTop: 5 }]}>Monitor Stations</Text>\r\n                                                    <Text style={styles.groundSegmentColors}>AFMS blue, AFSCN yellow, NGA purple</Text>\r\n                                                    <Text style={styles.groundSegmentText}>Six monitor stations are located at Schriever Air Force Base in Colorado, Cape Canaveral, Florida, Hawaii, Ascension Island in the Atlantic Ocean, Diego Garcia Atoll in the Indian Ocean, and Kwajalein Island in the South Pacific Ocean.Six additional monitoring stations were added in 2005 in Argentina, Bahrain, United Kingdom, Ecuador, Washington DC, and Australia. Each of the monitor stations checks the exact altitude, position, speed, and overall health of the orbiting satellites. The control segment uses measurements collected by the monitor stations to predict the behavior of each satellite's orbit and clock. The prediction data is up-linked, or transmitted, to the satellites for transmission back to the users. The control segment also ensures that the GPS satellite orbits and clocks remain within acceptable limits. A station can track up to 11 satellites at a time. This \"check-up\" is performed twice a day, by each station, as the satellites complete their journeys around the earth. Noted variations, such as those caused by the gravity of the moon, sun and the pressure of solar radiation, are passed along to the master control station.</Text>\r\n\r\n                                                    <Text style={[styles.groundSegmentHeading, { marginTop: 5 }]}>Ground Antennas</Text>\r\n                                                    <Text style={styles.groundSegmentColors}>Green</Text>\r\n                                                    <Text style={styles.groundSegmentText}>\r\n                                                        The Ground Antennas uplink data to the satellites via S-band radio signals. These data includes ephemerides and clock correction information transmitted within the Navigation Message, as well as command telemetry from the MCS.\r\n                                                        This information can be uploaded to each satellite three times per day, i.e., every 8 hours; nevertheless, it is usually updated just once a day.\r\n                                                    </Text>\r\n                                                </ScrollView>\r\n                                            </View>\r\n                                            <View style={{ width: '40%', marginTop: 10 }}>\r\n                                                <Button title=\"Hide info\" onPress={this.toggleGroundSegmentModal} />\r\n                                            </View>\r\n                                        </View>\r\n                                    </Modal>\r\n\r\n                                    <View style={[styles.hairlineSplitLine]} />\r\n\r\n                                    <View style={{ marginHorizontal: 10, marginTop: 10 }}>\r\n                                        <Text>Set time speed ({Math.trunc(this.state.timeSpeedSliderValue).toString()}x normal)</Text>\r\n                                        <Slider\r\n                                            value={this.state.timeSpeedSliderValue}\r\n                                            minimumValue={1}\r\n                                            maximumValue={10000}\r\n                                            onValueChange={(val) => this.setState({ timeSpeedSliderValue: val })}\r\n                                        />\r\n                                    </View>\r\n\r\n                                    <View style={{ paddingBottom: 400 }}></View>\r\n                                </ScrollView>\r\n                            </View>\r\n                        </View>\r\n                    }\r\n                />\r\n\r\n                <FlashMessage\r\n                    position={\"top\"}\r\n                    autoHide={true}\r\n                />\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nmodule.exports = satviz\r\n\r\n// Constants used in styles\r\nconst { width, height } = Dimensions.get('window');\r\n\r\nconst colors = {\r\n    selectedBubble: '#848787',\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    bodyViewStyle: {\r\n        flex: 1,\r\n        position: 'absolute',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    arView: {\r\n        flex: 1,\r\n        position: 'absolute',\r\n        height: '100%',\r\n    },\r\n    headerLayoutStyle: {\r\n        width,\r\n        height: 50,\r\n        backgroundColor: 'grey',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    slidingPanelLayoutStyle: {\r\n        width,\r\n        height,\r\n        backgroundColor: '#ffffff',\r\n    },\r\n    commonTextStyle: {\r\n        color: 'white',\r\n        fontSize: 18,\r\n    },\r\n\r\n    modalIcon: {\r\n        position: 'absolute',\r\n        right: '5%',\r\n        top: '2%',\r\n    },\r\n    helpModal: {\r\n        backgroundColor: \"white\",\r\n        marginHorizontal: '10%',\r\n        padding: 15,\r\n        height: '50%',\r\n        textAlign: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    helpModalHeading: {\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n        fontSize: 16\r\n    },\r\n    modalCloseIcon: {\r\n        position: 'absolute',\r\n        right: 9,\r\n        top: 9,\r\n    },\r\n\r\n    groundSegmentModal: {\r\n        backgroundColor: \"white\",\r\n        marginHorizontal: '10%',\r\n        height: '80%',\r\n        textAlign: 'right',\r\n        alignItems: 'center',\r\n        padding: '3%',\r\n        paddingBottom: 0,\r\n    },\r\n    groundSegmentHeading: {\r\n        fontWeight: 'bold',\r\n        textAlign: 'center',\r\n        fontSize: 16\r\n    },\r\n    groundSegmentText: {\r\n        textAlign: 'justify',\r\n    },\r\n    groundSegmentColors: {\r\n        textAlign: 'center',\r\n        fontSize: 12\r\n    },\r\n\r\n    hairlineSplitLine: {\r\n        borderBottomColor: 'black',\r\n        borderBottomWidth: StyleSheet.hairlineWidth,\r\n    },\r\n\r\n    iconShadow: {\r\n        shadowOpacity: 2,\r\n        textShadowRadius: 2,\r\n        textShadowOffset: { width: 0, height: 0 }\r\n    },\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Vojcek/Desktop/BP/CODES/satviz/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "InitialARScene",
    "memberof": "satviz/App.js",
    "static": true,
    "longname": "satviz/App.js~InitialARScene",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "satviz",
    "memberof": "satviz/App.js",
    "static": true,
    "longname": "satviz/App.js~satviz",
    "access": "public",
    "export": true,
    "importPath": "satviz/satviz/App.js",
    "importStyle": "satviz",
    "description": "Default class of Satviz application.",
    "lineNumber": 51,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "satviz/App.js~satviz",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/App.js~satviz#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "manualSatSelectTextInput",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#manualSatSelectTextInput",
    "access": "public",
    "description": "Reference to text input for manual satellite selection",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "React.RefObject<any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "state",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#state",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "{\"selectedItems\": *, \"maxItems\": *, \"selectedItemsManual\": *, \"selectedItemsGroundSegment\": *, \"helpModalVisible\": *, \"satelliteModalVisible\": *, \"satelliteModalSatellite\": *, \"orbitIDs\": *, \"orbitOpacity\": number, \"groundSegmentModalVisible\": *, \"slidingPanelToggled\": *, \"slidingPanelText\": string, \"timeSpeedSliderValue\": number}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "maxSelectedItems",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#maxSelectedItems",
    "access": "public",
    "description": "Maximum number of selected items in satellite multiselect ",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "onSatelliteSelectedItemsChange",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#onSatelliteSelectedItemsChange",
    "access": "public",
    "description": "Callback for change in satellite multiselect selected items.",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedItems",
        "description": "IDs of selected items in multiselect"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "onGroundSegmentSelectedItemsChange",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#onGroundSegmentSelectedItemsChange",
    "access": "public",
    "description": "Callback for change in ground segment multiselect selected items.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedItemsGroundSegment",
        "description": "IDs of selected items in multiselect"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "toggleHelpModal",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#toggleHelpModal",
    "access": "public",
    "description": " Change visibility of help modal",
    "lineNumber": 154,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "satelliteModalSetSatelliteCallback",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#satelliteModalSetSatelliteCallback",
    "access": "public",
    "description": "Callback for setting satellite for satellite info modal.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "SatelliteObject"
        ],
        "spread": false,
        "optional": false,
        "name": "sat",
        "description": "Satellite to be displayed info about"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "toggleSatelliteModal",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#toggleSatelliteModal",
    "access": "public",
    "description": "Change visibility of satellite modal.",
    "lineNumber": 174,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "toggleGroundSegmentModal",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#toggleGroundSegmentModal",
    "access": "public",
    "description": "Change visibility of GPS ground segment modal.",
    "lineNumber": 183,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "toggleSlidePanel",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#toggleSlidePanel",
    "access": "public",
    "description": "Change visibility of sliding panel and change appropriately toggle text.",
    "lineNumber": 192,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "addManual",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#addManual",
    "access": "public",
    "description": "Adds satellite manually with ID in manualSatSelectTextInput.",
    "lineNumber": 205,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "removeManual",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#removeManual",
    "access": "public",
    "description": "Removes satellite manually with given ID.",
    "lineNumber": 223,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "removeID",
        "description": "ID to be removed from manualy selected IDs"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "removeManualAll",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#removeManualAll",
    "access": "public",
    "description": "Removes all manualy selected satellites.",
    "lineNumber": 230,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "removeSatelliteWithError",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#removeSatelliteWithError",
    "access": "public",
    "description": "Removes satellite with given ID from selected satellites.",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "satID",
        "description": "ID of satellite to be removed"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "isOrbitEnabledForSatelliteInModal",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#isOrbitEnabledForSatelliteInModal",
    "access": "public",
    "description": "Get orbit status for satellite in Satellite Info Modal.",
    "lineNumber": 263,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "toggleOrbitVisibility",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#toggleOrbitVisibility",
    "access": "public",
    "description": "Change visibility of orbit ofsatellite with given ID.",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "satelliteID",
        "description": "Satellite which orbit we want to toggle"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "render",
    "memberof": "satviz/App.js~satviz",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/App.js~satviz#render",
    "access": "public",
    "description": "Renders main window of the Satviz application.",
    "lineNumber": 302,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{View} Top level View node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "View"
      ],
      "spread": false,
      "description": "Top level View node"
    },
    "params": []
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "opacitySliderTimeout",
    "memberof": "satviz/App.js~satviz",
    "static": false,
    "longname": "satviz/App.js~satviz#opacitySliderTimeout",
    "access": "public",
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "width",
    "memberof": "satviz/App.js",
    "static": true,
    "longname": "satviz/App.js~width",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 621,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "colors",
    "memberof": "satviz/App.js",
    "static": true,
    "longname": "satviz/App.js~colors",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 623,
    "undocument": true,
    "type": {
      "types": [
        "{\"selectedBubble\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "styles",
    "memberof": "satviz/App.js",
    "static": true,
    "longname": "satviz/App.js~styles",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 627,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "satviz/js/ARScene.js",
    "content": "/** \r\n *  @fileOverview Default AR scene of Satviz application. \r\n *\r\n *  @author       Vojtěch Pospíšil\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport { StyleSheet } from 'react-native';\r\n\r\nimport {\r\n    ViroARScene,\r\n    ViroConstants,\r\n    ViroARImageMarker,\r\n    ViroARTrackingTargets,\r\n    ViroSpotLight,\r\n    ViroNode,\r\n    ViroMaterials,\r\n    ViroSphere,\r\n} from 'react-viro';\r\n\r\nimport Globe from './components/Globe'\r\nimport { showMessage, hideMessage } from \"react-native-flash-message\";\r\n\r\n/**\r\n * Class representing default AR scene.\r\n */\r\nexport default class ARScene extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n\r\n        this.state = {\r\n            /** Rotation of globe based on real world \r\n             * @type {Array.<number>} */\r\n            globeRotation: [0, 0, 0],\r\n            /** State of detection true=globe target detected\r\n             * @type {boolean} */\r\n            globeDetected: false,\r\n            /** Detected globe real world position \r\n             * @type {Array.<number>|null} */\r\n            globePosition: null,\r\n\r\n            /** IDs of selected satellites to render \r\n             * @type {Array.<string>} */\r\n            satelliteIDs: [],\r\n\r\n            /** IDs of satellites which should have orbit rendered \r\n             * @type {Array.<string>} */\r\n            orbitIDs: [],\r\n            /** Opacity of rendered orbits \r\n             * @type {number} */\r\n            orbitOpacity: 0.8,\r\n\r\n            /** Scale (multiply) of real time speed \r\n             * @type {number} */\r\n            timeScale: 1\r\n        };\r\n\r\n        /** Names of currently tracked image targets \r\n         * @type {Array.<string>} */\r\n        this.tracking = [];\r\n        /** State of globe tracking \r\n         * @type {boolean} */\r\n        this.isTracking = false;\r\n\r\n        /** Count of globe position recalculation \r\n         * @type {number} */\r\n        this.positionModCount = 0;\r\n\r\n        /** Switch for Globe rendering \r\n         * @type {boolean} */\r\n        this.renderDisabled = true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // Rerender on change of props\r\n        if (this.state.satelliteIDs != this.props.arSceneNavigator.viroAppProps.satelliteIDs) {\r\n            this.setState({\r\n                satelliteIDs: this.props.arSceneNavigator.viroAppProps.satelliteIDs,\r\n            })\r\n        }\r\n        if (this.state.timeScale != this.props.arSceneNavigator.viroAppProps.timeScale) {\r\n            this.setState({\r\n                timeScale: this.props.arSceneNavigator.viroAppProps.timeScale,\r\n            })\r\n        }\r\n        if (this.state.orbitIDs != this.props.arSceneNavigator.viroAppProps.orbitIDs) {\r\n            this.setState({\r\n                orbitIDs: this.props.arSceneNavigator.viroAppProps.orbitIDs,\r\n            });\r\n        }\r\n        if (this.state.orbitOpacity != this.props.arSceneNavigator.viroAppProps.orbitOpacity) {\r\n            this.setState({\r\n                orbitOpacity: this.props.arSceneNavigator.viroAppProps.orbitOpacity,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate globe rotation from tracking targets\r\n     * \r\n     * @returns {Array.<number>} Rotation in format [0, Y rotation, 0]\r\n     */\r\n    getGlobeRotation = () => {\r\n        if (this.tracking.length === 0) {\r\n            return this.state.globeRotation;\r\n        }\r\n\r\n        let sum = 0;\r\n        this.tracking.forEach(element => {\r\n            // -15 is because of \"default pose\" of globe where africa is in front of camera\r\n            sum += (angles[element] - 15);\r\n        });\r\n\r\n        let angle = sum / this.tracking.length;\r\n\r\n        // Negative angle is because rotation has opposite direction than angles on globe\r\n        return [0, -angle, 0];\r\n    }\r\n\r\n    /**\r\n     * Modify globe position based on given position.\r\n     * \r\n     * @param {Array.<number>} position Position to adjust globe position to\r\n     */\r\n    modifyGlobePosition = (position) => {\r\n        // move Z coord into center of globe\r\n        position[2] = position[2] - 0.085;\r\n\r\n        if (this.positionModCount === 0) {\r\n            this.setState({ globePosition: position, });\r\n        } else {\r\n            // Limit position modification to only first 4 attempts\r\n            if (this.positionModCount > 3) {\r\n                return;\r\n            }\r\n\r\n            let newPos = [];\r\n            newPos[0] = ((this.state.globePosition[0] * this.positionModCount) + position[0]) / (this.positionModCount + 1);\r\n            newPos[1] = ((this.state.globePosition[1] * this.positionModCount) + position[1]) / (this.positionModCount + 1);\r\n            newPos[2] = ((this.state.globePosition[2] * this.positionModCount) + position[2]) / (this.positionModCount + 1);\r\n\r\n            /*\r\n           newPos[0] = ((this.state.globePosition[0]) + position[0]) / 2;\r\n           newPos[1] = ((this.state.globePosition[1]) + position[1]) / 2;\r\n           newPos[2] = ((this.state.globePosition[2]) + position[2]) / 2;\r\n           */\r\n\r\n            this.setState({ globePosition: newPos, });\r\n        }\r\n\r\n        this.positionModCount += 1;\r\n    }\r\n\r\n    /**\r\n     * Function which is triggered everytime when imageTarget anchor changes.\r\n     * \r\n     * @param {any} e Event which happened\r\n     * @param {string} targetName Name of updated target\r\n     */\r\n    _onAnchorUpdated = (e, targetName) => {\r\n        let changed = false;\r\n\r\n        if (e.trackingMethod === \"tracking\") {\r\n            // Tracking something - render Globe\r\n            this.renderDisabled = false;\r\n\r\n            // On flat target simply copy detected position and rotation\r\n            if (targetName === \"flatTarget\") {\r\n                this.setState({ globePosition: e.position, globeRotation: e.rotation });\r\n                return;\r\n            }\r\n\r\n            if (!this.state.globeDetected && targetName !== \"flatTarget\") {\r\n                this.setState({ globeDetected: true });\r\n            }\r\n\r\n            // Add target name to tracking if not there\r\n            if (!this.tracking.includes(targetName)) {\r\n                this.tracking.push(targetName);\r\n\r\n                // Hold only last 3 targets\r\n                if (this.tracking.length > 3) {\r\n                    this.tracking.shift();\r\n                }\r\n\r\n                changed = true;\r\n            }\r\n\r\n            // Update globe position according to detected position\r\n            this.modifyGlobePosition(e.position);\r\n        } else if (e.trackingMethod === \"lastKnownPose\") {\r\n            // LastKnownPose means that target is no longer available so remove it\r\n            if (this.tracking.includes(targetName)) {\r\n                this.tracking = this.tracking.filter(e => e !== targetName);\r\n                changed = true;\r\n            }\r\n        }\r\n\r\n        // When some target has been changed get user know it and update rotation\r\n        if (changed) {\r\n            if (this.tracking.length == 0 && this.isTracking == true) {\r\n                this.isTracking = false;\r\n                showMessage({\r\n                    message: \"Tracking lost :(\",\r\n                    type: \"warning\",\r\n                });\r\n            }\r\n\r\n            if (this.tracking.length != 0 && this.isTracking == false) {\r\n                this.isTracking = true;\r\n                showMessage({\r\n                    message: \"Tracking established\",\r\n                    type: \"success\",\r\n                });\r\n            }\r\n\r\n            let rotation = this.getGlobeRotation();\r\n            this.setState({ globeRotation: rotation });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maps all imageTarget names to ViroARImageMarker\r\n     * \r\n     * @returns {Array.<ViroARImageMarker>} Array of AR image markers\r\n     */\r\n    renderTargets = () => {\r\n        let targets = [];\r\n\r\n        targets = targetNames.map((name) => {\r\n            return (\r\n                <ViroARImageMarker\r\n                    key={name}\r\n                    target={name}\r\n                    onAnchorUpdated={(e) => this._onAnchorUpdated(e, name)}\r\n                />\r\n            )\r\n        });\r\n\r\n        return targets;\r\n    }\r\n\r\n    /**\r\n     * Returns Globe component with everything setu up to visualization\r\n     * \r\n     * @returns {ViroNode} Globe with all properties set\r\n     */\r\n    renderGlobe = () => {\r\n        if (this.renderDisabled) {\r\n            return (<ViroNode></ViroNode>);\r\n        }\r\n\r\n        let position = this.state.globePosition;\r\n        let flatTarget = true;\r\n        let rotation = this.state.globeRotation;\r\n\r\n        if (this.state.globeDetected) {\r\n            flatTarget = false;\r\n        }\r\n\r\n        return (\r\n            <ViroNode position={position} rotation={rotation}>\r\n                <Globe\r\n                    satelliteClickCallback={this.props.arSceneNavigator.viroAppProps.satelliteClickCallback}\r\n                    satelliteIDs={this.state.satelliteIDs}\r\n                    groundSegmentIDs={this.props.arSceneNavigator.viroAppProps.groundSegmentIDs}\r\n                    timeScale={this.state.timeScale}\r\n                    flatTarget={flatTarget}\r\n                    renderVirtualGlobe={false}\r\n                    removeSatelliteCallback={this.props.arSceneNavigator.viroAppProps.removeSatelliteCallback}\r\n                    orbitIDs={this.state.orbitIDs}\r\n                    orbitOpacity={this.state.orbitOpacity}\r\n                />\r\n            </ViroNode>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders AR scene.\r\n     * \r\n     * @returns {ViroARScene} ARscene with globe visualization \r\n     */\r\n    render() {\r\n        return (\r\n            <ViroARScene onTrackingUpdated={this._onInitialized} >\r\n\r\n                <ViroSpotLight innerAngle={5} outerAngle={90} direction={[0, -1, -.2]}\r\n                    position={[0, 3, 1]} color=\"#ffffff\" castsShadow={true} />\r\n\r\n                <ViroARImageMarker target={\"flatTarget\"} onAnchorUpdated={(e) => this._onAnchorUpdated(e, \"flatTarget\")} />\r\n\r\n                {this.renderTargets()}\r\n\r\n                {this.renderGlobe()}\r\n            </ViroARScene>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * Names of imageTargets of globe\r\n * @constant\r\n * @type {Array.<string>}\r\n */\r\nconst targetNames = [\r\n    \"africa\", \"atlantic\", \"australia\", \"china\", \"europe\",\r\n    \"hawaii\", \"indonesia\", \"northAmerica\", \"southAmerica\"\r\n];\r\n\r\n/**\r\n * Angles of rotation of center of imageTarget\r\n * @constant\r\n * @type {Object<string, number>}\r\n */\r\nconst angles = {\r\n    \"africa\": 15,\r\n    \"atlantic\": 340,\r\n    \"australia\": 135,\r\n    \"china\": 90,\r\n    \"europe\": 15,\r\n    \"hawaii\": 195,\r\n    \"indonesia\": 140,\r\n    \"northAmerica\": 260,\r\n    \"southAmerica\": 300,\r\n}\r\n\r\n// Definition of tracking targets for ARImageTargets\r\nViroARTrackingTargets.createTargets({\r\n    \"flatTarget\": {\r\n        source: require('./res/targets/earthFlat.jpeg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.2 // real world width in meters\r\n    },\r\n    \"africa\": {\r\n        source: require('./res/targets/africa.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n    \"atlantic\": {\r\n        source: require('./res/targets/atlantic.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n    \"australia\": {\r\n        source: require('./res/targets/australia.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n    \"china\": {\r\n        source: require('./res/targets/china.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n    \"europe\": {\r\n        source: require('./res/targets/europe.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n    \"hawaii\": {\r\n        source: require('./res/targets/hawaii.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n    \"indonesia\": {\r\n        source: require('./res/targets/indonesia.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n    \"northAmerica\": {\r\n        source: require('./res/targets/northAmerica.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n    \"southAmerica\": {\r\n        source: require('./res/targets/southAmerica.jpg'),\r\n        orientation: \"Up\",\r\n        physicalWidth: 0.3,\r\n    },\r\n});\r\n\r\nViroMaterials.createMaterials({\r\n    mat: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseColor: '#6e6e6e'\r\n    }\r\n});\r\n\r\nmodule.exports = ARScene;",
    "static": true,
    "longname": "C:/Users/Vojcek/Desktop/BP/CODES/satviz/js/ARScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "ARScene",
    "memberof": "satviz/js/ARScene.js",
    "static": true,
    "longname": "satviz/js/ARScene.js~ARScene",
    "access": "public",
    "export": true,
    "importPath": "satviz/satviz/js/ARScene.js",
    "importStyle": "ARScene",
    "description": "Class representing default AR scene.",
    "lineNumber": 30,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 75,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "state",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#state",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "{\"globeRotation\": *, \"globeDetected\": *, \"globePosition\": *, \"satelliteIDs\": *, \"orbitIDs\": *, \"orbitOpacity\": number, \"timeScale\": number}"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "tracking",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#tracking",
    "access": "public",
    "description": "Names of currently tracked image targets ",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "isTracking",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#isTracking",
    "access": "public",
    "description": "State of globe tracking ",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "positionModCount",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#positionModCount",
    "access": "public",
    "description": "Count of globe position recalculation ",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "renderDisabled",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#renderDisabled",
    "access": "public",
    "description": "Switch for Globe rendering ",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "prevState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "getGlobeRotation",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#getGlobeRotation",
    "access": "public",
    "description": "Calculate globe rotation from tracking targets",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<number>} Rotation in format [0, Y rotation, 0]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<number>"
      ],
      "spread": false,
      "description": "Rotation in format [0, Y rotation, 0]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "modifyGlobePosition",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#modifyGlobePosition",
    "access": "public",
    "description": "Modify globe position based on given position.",
    "lineNumber": 129,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Position to adjust globe position to"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "_onAnchorUpdated",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#_onAnchorUpdated",
    "access": "private",
    "description": "Function which is triggered everytime when imageTarget anchor changes.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Event which happened"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetName",
        "description": "Name of updated target"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "renderTargets",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#renderTargets",
    "access": "public",
    "description": "Maps all imageTarget names to ViroARImageMarker",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ViroARImageMarker>} Array of AR image markers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ViroARImageMarker>"
      ],
      "spread": false,
      "description": "Array of AR image markers"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "renderGlobe",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#renderGlobe",
    "access": "public",
    "description": "Returns Globe component with everything setu up to visualization",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ViroNode} Globe with all properties set"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ViroNode"
      ],
      "spread": false,
      "description": "Globe with all properties set"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "render",
    "memberof": "satviz/js/ARScene.js~ARScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/ARScene.js~ARScene#render",
    "access": "public",
    "description": "Renders AR scene.",
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ViroARScene} ARscene with globe visualization "
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ViroARScene"
      ],
      "spread": false,
      "description": "ARscene with globe visualization"
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "targetNames",
    "memberof": "satviz/js/ARScene.js",
    "static": true,
    "longname": "satviz/js/ARScene.js~targetNames",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/ARScene.js",
    "importStyle": null,
    "description": "Names of imageTargets of globe",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "angles",
    "memberof": "satviz/js/ARScene.js",
    "static": true,
    "longname": "satviz/js/ARScene.js~angles",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/ARScene.js",
    "importStyle": null,
    "description": "Angles of rotation of center of imageTarget",
    "lineNumber": 319,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, number>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "satviz/js/components/CustomInfoModal.js",
    "content": "/** \r\n *  @fileOverview Component for displaying info about selected satellite. \r\n *\r\n *  @author       Vojtěch Pospíšil\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    TouchableOpacity,\r\n    Button\r\n} from 'react-native';\r\n\r\nimport Modal from \"react-native-modal\";\r\n\r\nimport Icon from 'react-native-vector-icons/Fontisto';\r\n\r\n/**\r\n* Dictionary of term descriptions.\r\n* @constant\r\n*\r\n* @type {Object<string, string>}\r\n*/\r\nconst messageDict = {\r\n    id: \"The NORAD Catalog Number or USSPACECOM object number is a sequential 5-digit number assigned by USSPACECOM to all Earth orbiting satellites in order of identification.\",\r\n    intlDes: \"The International Designator is an naming convention for satellites. It consists of the launch year, a 3-digit incrementing launch number of that year and up to a 3-letter code representing the sequential id of a piece in a launch. Only publicly known satellites are designated.\",\r\n    apogee: \"Apogee is the point where the satellite is farthest from Earth is called apogee (sometimes called apoapsis, or apifocus\",\r\n    perigee: \"Perigee is the point where the satellite is closest to the Earth (sometimes called periapsis or perifocus)\",\r\n    inclination: \"Inclination is the angle between the orbital plane and the equatorial plane. By convention, inclination is a number between 0 and 180 degrees. A satellite in a geostationary orbit has an inclination zero. A satellite in a polar orbit will have an inclination of 90 degrees.\",\r\n    latitude: \"Latitude is a geographic coordinate that specifies the north–south position of a point on the Earth's surface. It is an angle which ranges from 0° at the Equator to 90° (North or South) at the poles.\",\r\n    longitude: \"Longitude is a geographic coordinate that specifies the east–west position of a point on the Earth's surface. The longitude of other places is measured as the angle east or west from the Prime Meridian, ranging from 0° at the Prime Meridian to +180° eastward and −180° westward.\",\r\n    height: \"Altitude or height (sometimes known as 'depth') a distance measurement, usually in the vertical or \\\"up\\\" direction, between a reference datum and a point or object. It is basically the distance between object and Earth sea level.\",\r\n    velocity: \"The velocity of an object is the rate of change of its position with respect to a frame of reference, and is a function of time. It is more known as speed.\",\r\n    period: \"Period is the amount of time to complete one revolution around the Earth.\",\r\n}\r\n\r\n/**\r\n* Dictionary of orbit toggle button messages.\r\n* @constant\r\n*\r\n* @type {Object<string, string>}\r\n*/\r\nconst message = {\r\n    show: \"Show orbit\",\r\n    hide: \"Hide orbit\"\r\n}\r\n\r\n/**\r\n * Component for displaying info about selected satellite.\r\n * \r\n * \r\n */\r\nexport default class CustomInfoModal extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            /** Data for rendering information about satellite. @type {Object<string, string>} */\r\n            data: {},\r\n            /** Selected term to be explained. @type {string} */\r\n            explanationRequest: null,\r\n            /** State of component (modal) visibility - `true` means modal is visible @type {boolean} */\r\n            modalVisible: false,\r\n            /** Text of the orbit toggle button. @type {string} */\r\n            buttonText: message.hide,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // update state to rerender component\r\n        if (this.state.modalVisible != this.props.isModalVisible) {\r\n            this.setState({ modalVisible: this.props.isModalVisible });\r\n        }\r\n\r\n        // update info when the sat ID is changed\r\n        if (this.props.satellite && this.state.data.id != this.props.satellite[0].id) {\r\n            this.updateSateliteData();\r\n        }\r\n\r\n        // set apropriate text to orbit toggle button\r\n        if (this.props.orbitEnabled != prevProps.orbitEnabled && prevProps.orbitEnabled) {\r\n            if (!this.props.orbitEnabled) {\r\n                this.setState({\r\n                    buttonText: message.hide,\r\n                });\r\n            }\r\n\r\n            if (this.props.orbitEnabled) {\r\n                this.setState({\r\n                    buttonText: message.show,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates information about satellite.\r\n     */\r\n    updateSateliteData = () => {\r\n        let temp = this.props.satellite[0].getDataForInfoModal();\r\n        this.setState({ data: temp });\r\n\r\n        if (this.props.isModalVisible) {\r\n            setTimeout(() => {\r\n                this.updateSateliteData();\r\n            }, 500);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Alternates between toggle orbit button messages.\r\n     */\r\n    changeText = () => {\r\n        let text;\r\n        if (this.state.buttonText === message.show) {\r\n            text = message.hide;\r\n        } else {\r\n            text = message.show;\r\n        }\r\n\r\n        this.setState({\r\n            buttonText: text,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback for closing modal window.\r\n     */\r\n    closeModalCallback = () => {\r\n        // next opening of modal will be without any explanation\r\n        this.setState({\r\n            explanationRequest: null,\r\n        });\r\n\r\n        this.props.closeModal();\r\n    }\r\n\r\n    /**\r\n     * Renders text info with satellite informations.\r\n     * \r\n     * @returns {View} All satellite informations\r\n     */\r\n    renderTextInfo = () => {\r\n        return (\r\n            <View style={styles.textInfo}>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"id\" }) }}>\r\n                    <Text style={styles.boldFont}>NORAD ID: </Text>{this.state.data.id}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"intlDes\" }) }}>\r\n                    <Text style={styles.boldFont}>Int'l Designator: </Text>{this.state.data.intlDes}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"apogee\" }) }}>\r\n                    <Text style={styles.boldFont}>Apogee: </Text>{this.state.data.apogee}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"perigee\" }) }}>\r\n                    <Text style={styles.boldFont}>Perigee: </Text>{this.state.data.perigee}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"inclination\" }) }}>\r\n                    <Text style={styles.boldFont}>Inclination: </Text>{this.state.data.inclination}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"latitude\" }) }}>\r\n                    <Text style={styles.boldFont}>Latitude: </Text>{this.state.data.latitude}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"longitude\" }) }}>\r\n                    <Text style={styles.boldFont}>Longitude: </Text>{this.state.data.longitude}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"height\" }) }}>\r\n                    <Text style={styles.boldFont}>Height: </Text>{this.state.data.height}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"velocity\" }) }}>\r\n                    <Text style={styles.boldFont}>Velocity: </Text>{this.state.data.velocity}\r\n                </Text>\r\n                <Text onPress={() => { this.setState({ explanationRequest: \"period\" }) }}>\r\n                    <Text style={styles.boldFont}>Period: </Text>{this.state.data.period}\r\n                </Text>\r\n                <Text style={{ fontSize: 10, color: 'gray', marginTop: 5 }}>By clicking on line you can get more info</Text>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders selected term explanation.\r\n     */\r\n    renderExplanation = () => {\r\n        return (\r\n            <Text style={styles.explanation}>\r\n                {messageDict[this.state.explanationRequest]}\r\n            </Text>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.modalVisible) {\r\n            return <View></View>\r\n        }\r\n\r\n        return (\r\n            <View>\r\n                <Modal isVisible={this.state.modalVisible}\r\n                    useNativeDriver={true}\r\n                    onBackdropPress={this.closeModalCallback}\r\n                >\r\n                    <View style={styles.infoModal}>\r\n                        <TouchableOpacity onPress={this.closeModalCallback} style={styles.modalCloseIcon}>\r\n                            <Icon name=\"close-a\" size={20} color=\"grey\" />\r\n                        </TouchableOpacity>\r\n\r\n                        {this.renderTextInfo()}\r\n\r\n                        <View style={{ marginTop: 10 }}>\r\n                            <Button\r\n                                title={this.state.buttonText}\r\n                                onPress={() => {\r\n                                    this.props.orbitButtonCallback(this.state.data.id);\r\n                                    this.changeText();\r\n                                }}\r\n                            />\r\n                        </View>\r\n\r\n                        {this.renderExplanation()}\r\n                    </View>\r\n                </Modal>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    infoModal: {\r\n        backgroundColor: \"white\",\r\n        marginHorizontal: '10%',\r\n        height: '53%',\r\n        paddingHorizontal: \"5%\",\r\n    },\r\n    modalCloseIcon: {\r\n        position: 'absolute',\r\n        right: '5%',\r\n        top: '2%',\r\n    },\r\n    infoRow: {\r\n        flex: 1,\r\n        alignSelf: 'stretch',\r\n        flexDirection: 'row',\r\n    },\r\n    rowElement: {\r\n        flex: 1,\r\n        alignSelf: 'stretch'\r\n    },\r\n    boldFont: {\r\n        fontWeight: 'bold',\r\n    },\r\n    textInfo: {\r\n        paddingTop: '5%',\r\n        width: '80%',\r\n    },\r\n    explanation: {\r\n        paddingTop: '3%',\r\n    }\r\n});",
    "static": true,
    "longname": "C:/Users/Vojcek/Desktop/BP/CODES/satviz/js/components/CustomInfoModal.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "messageDict",
    "memberof": "satviz/js/components/CustomInfoModal.js",
    "static": true,
    "longname": "satviz/js/components/CustomInfoModal.js~messageDict",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/components/CustomInfoModal.js",
    "importStyle": null,
    "description": "Dictionary of term descriptions.",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "variable",
    "name": "message",
    "memberof": "satviz/js/components/CustomInfoModal.js",
    "static": true,
    "longname": "satviz/js/components/CustomInfoModal.js~message",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/components/CustomInfoModal.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "{\"show\": string, \"hide\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "class",
    "name": "CustomInfoModal",
    "memberof": "satviz/js/components/CustomInfoModal.js",
    "static": true,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "access": "public",
    "export": true,
    "importPath": "satviz/satviz/js/components/CustomInfoModal.js",
    "importStyle": "CustomInfoModal",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 99,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "state",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#state",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "{\"data\": *, \"explanationRequest\": *, \"modalVisible\": *, \"buttonText\": *}"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "prevState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "member",
    "name": "updateSateliteData",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#updateSateliteData",
    "access": "public",
    "description": "Updates information about satellite.",
    "lineNumber": 104,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 103,
    "kind": "member",
    "name": "changeText",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#changeText",
    "access": "public",
    "description": "Alternates between toggle orbit button messages.",
    "lineNumber": 118,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "member",
    "name": "closeModalCallback",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#closeModalCallback",
    "access": "public",
    "description": "Callback for closing modal window.",
    "lineNumber": 134,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "renderTextInfo",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#renderTextInfo",
    "access": "public",
    "description": "Renders text info with satellite informations.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{View} All satellite informations"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "View"
      ],
      "spread": false,
      "description": "All satellite informations"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "member",
    "name": "renderExplanation",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#renderExplanation",
    "access": "public",
    "description": "Renders selected term explanation.",
    "lineNumber": 189,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "render",
    "memberof": "satviz/js/components/CustomInfoModal.js~CustomInfoModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/components/CustomInfoModal.js~CustomInfoModal#render",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "variable",
    "name": "styles",
    "memberof": "satviz/js/components/CustomInfoModal.js",
    "static": true,
    "longname": "satviz/js/components/CustomInfoModal.js~styles",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/components/CustomInfoModal.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "satviz/js/components/Globe.js",
    "content": "/** \r\n *  @fileOverview Globe component providing all the visualization.\r\n *\r\n *  @author       Vojtěch Pospíšil\r\n */\r\n\r\n\"use strict\";\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport {\r\n    ViroMaterials,\r\n    ViroNode,\r\n    Viro3DObject,\r\n    ViroAmbientLight,\r\n    ViroSphere,\r\n    ViroBox,\r\n    ViroPolyline,\r\n} from 'react-viro';\r\n\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\n\r\nimport SpaceTrack from '../SpaceTrack';\r\nimport SatelliteObject from '../SatelliteObject';\r\n\r\n\r\nvar satellite = require('satellite.js');\r\nvar Clock = require('timetravel').Clock;\r\n\r\n/**\r\n * Component representing virtual globe with satellites.\r\n */\r\nexport default class Globe extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            /** Currently visualized satellite objects\r\n             * @type {Array.<Object>} */\r\n            satellites: [],\r\n            /** Currently visualized satellite IDs\r\n             * @type {Array.<string>} */\r\n            currentSatelliteIDs: [],\r\n            /** IDs of sats without orbit rendered \r\n             * @type {Array<string>} */\r\n            excludedOrbits: [],\r\n            /** Opacity of orbit line\r\n             * @type {number} */\r\n            orbitOpacity: 0.8,\r\n            /** Rotation around individual axis to compensate globe rotation\r\n             * @type {Array.<number>} */\r\n            groundRotationCompensation: [0, 0, 0]\r\n        }\r\n\r\n        /** Compensation of model rotation on different targets\r\n         *  @type {Array.<number>} */\r\n        this.modelListRotation = [0, 0, 0];\r\n        if (this.props.flatTarget) {\r\n            this.modelListRotation = [0, -143, 0];\r\n        } else {\r\n            this.modelListRotation = [0, -173, 0];\r\n        }\r\n\r\n        /** SpaceTrack object for getting data from Satellite Catalog\r\n         * @type {SpaceTrack} */\r\n        this.ST = new SpaceTrack();\r\n\r\n        /** State of globe data loading\r\n         * @type {boolean} */\r\n        this.loading = false;\r\n\r\n        /** Number of segments in one orbit\r\n         * @type {number} */\r\n        this.orbitSegmentCount = 100;\r\n        /** Timestamps of orbits starting times \r\n         * @type {Object<string, any>} */\r\n        this.orbitTimestamps = {};\r\n        /** Points of satellite orbits \r\n         * @type {Object<string, Array.<Array.<number>>> */\r\n        this.orbitPoints = {};\r\n\r\n        /** Globe custom clock with special functions\r\n         * @type {Clock}\r\n         */\r\n        this.clock = new Clock();\r\n\r\n        /** Last globe rotation time for optimized rotating\r\n         * @type {Clock.time}\r\n         */\r\n        this.lastRotationTime = this.clock.time();\r\n\r\n        /** Timer for satellite motion simulation */\r\n        this.moveTimer = setInterval(this.updatePositions, 100);\r\n        /** Timer for globe rotation simulation */\r\n        this.rotationTimer = setInterval(this.updateRotation, 30);\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState) {\r\n        // Fix for problem where numbers starting with zeros was casted to number\r\n        let propIDs;\r\n        if (this.props.satelliteIDs) {\r\n            propIDs = this.props.satelliteIDs.map(id => {\r\n                return (\"00000\" + id.toString()).slice(-5);\r\n            });\r\n        }\r\n\r\n        // Check whether two arrays have same elements or not\r\n        let areIDsSame = (propIDs.length === this.state.currentSatelliteIDs.length) && propIDs.every(value => this.state.currentSatelliteIDs.includes(value));\r\n\r\n        if (!areIDsSame && this.loading === false) {\r\n            let addition = propIDs.filter(x => !this.state.currentSatelliteIDs.includes(x));\r\n\r\n            let sats = [];\r\n\r\n            if (addition.length > 0) {\r\n                // Call ST funtion to get data according to newly added IDs\r\n                this.loading = true;\r\n\r\n                this.tle = await this.getTLEsFromWebAndStorage(addition);\r\n\r\n                sats = this.parseData();\r\n            }\r\n\r\n            // Get satellites which will be not removed from current ones\r\n            let keptFromCurrentObjects = this.state.satellites.filter(sat => propIDs.includes((sat.id).toString()));\r\n\r\n            // Get IDs of all visualized satellites\r\n            let curr = [...sats, ...keptFromCurrentObjects].map(sat => (sat.id).toString());\r\n\r\n            this.setState({\r\n                satellites: [...sats, ...keptFromCurrentObjects],\r\n                currentSatelliteIDs: curr,\r\n            })\r\n        }\r\n\r\n        // Readjust custom clock speed \r\n        if (this.props.timeScale !== prevProps.timeScale) {\r\n            this.clock.stop();\r\n            this.clock.speed(this.props.timeScale).time(this.clock.time());\r\n            this.clock.start();\r\n        }\r\n\r\n        // Update state for component rerender\r\n        if (this.props.orbitIDs !== prevProps.orbitIDs) {\r\n            this.setState({\r\n                excludedOrbits: [...this.props.orbitIDs],\r\n            });\r\n        }\r\n        if (this.props.orbitOpacity !== prevProps.orbitOpacity) {\r\n            this.setState({\r\n                orbitOpacity: this.props.orbitOpacity,\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets TLEs of satellites with given ids from web service or from async storage.\r\n     * \r\n     * @param {Array.<string>} ids ID of the satellites for which we want to obtain TLEs\r\n     * \r\n     * @returns {Array.<string>} TLE lines in format [TLE1 line1, TLE1 line2, TLE2 line1, ...]\r\n     */\r\n    getTLEsFromWebAndStorage = async (ids) => {\r\n        // Get date of satellite tle storage\r\n        let datePairs;\r\n        let additionDateKeys = ids.map(key => key + \"Date\");\r\n        try {\r\n            datePairs = await AsyncStorage.multiGet(additionDateKeys);\r\n        } catch(e) {\r\n            console.log(\"Error happened when retrieving dates of TLEs\");\r\n            console.log(e);\r\n        }\r\n\r\n        let idtoGetFromStorage = [];\r\n        let idToGetFromWeb = [];\r\n\r\n        // When date is udefined ->value is not in storage \r\n        // pair[0] is key, pair[1] is value\r\n        let dateNow = new Date();\r\n        const dayLenghtInMS = 86400000;\r\n        datePairs.forEach(pair => {\r\n            if (pair[1] === null) {\r\n                idToGetFromWeb.push(pair[0]);\r\n            } else {\r\n                let num = Number(pair[1]);\r\n                let dateFromStorage = new Date(num);\r\n                let diff = dateNow.getTime() - dateFromStorage.getTime();\r\n\r\n                if (diff > dayLenghtInMS) {\r\n                    idToGetFromWeb.push(pair[0]);\r\n                } else {\r\n                    idtoGetFromStorage.push(pair[0]);\r\n                }\r\n            }\r\n        });\r\n\r\n        idToGetFromWeb = idToGetFromWeb.map(id => id.substring(0, 5))\r\n        idtoGetFromStorage = idtoGetFromStorage.map(id => id.substring(0, 5))\r\n\r\n        let storageTLEPairs;\r\n        let storageTLE = [];\r\n        try {\r\n            storageTLEPairs = await AsyncStorage.multiGet(idtoGetFromStorage);\r\n        } catch(e) {\r\n            console.log(\"Error happened when retrieving value of TLEs\");\r\n            console.log(e);\r\n        }\r\n\r\n        storageTLEPairs.forEach(pair => {\r\n            if (pair[1] === null) {\r\n                // Shouldnt happen\r\n                idToGetFromWeb.push(pair[0]);\r\n            } else {\r\n                storageTLE.push(pair[1]);\r\n            }\r\n        });\r\n\r\n        let data = [];\r\n        if (idToGetFromWeb.length > 0) {\r\n            data = await this.ST.getTLEs(idToGetFromWeb);\r\n\r\n            // Convert TLE string to line separated array\r\n            data =  data.split('\\r\\n');\r\n\r\n            this.saveTLEsToAsyncStorage(data);\r\n        }\r\n\r\n        // storageTLE -> unfold form line1;line2\r\n        storageTLE = this.formatTLEFromAsyncStorage(storageTLE);\r\n\r\n        return [...storageTLE, ...data];\r\n    }\r\n\r\n    /**\r\n     * Formats TLEs for using from data obtained from Async Storage.\r\n     * \r\n     * @param {Array.<string>} data TLE data from Async Storage\r\n     * \r\n     * @returns {Array.<string>} Formated TLE data\r\n     */\r\n    formatTLEFromAsyncStorage = (data) => {\r\n        let arr = [];\r\n\r\n        data.forEach(e => {\r\n            let tle = e.split(';');\r\n            arr.push(tle[0]);\r\n            arr.push(tle[1]);\r\n        });\r\n\r\n        return arr;\r\n    }\r\n\r\n    /**\r\n     * Saves TLE data to Async Storage in correct format.\r\n     * \r\n     * @param {Array.<string>} data TLE data to store in Async Storage\r\n     * \r\n     */\r\n    saveTLEsToAsyncStorage = async (data) => {\r\n        let pairsToSave = [];\r\n\r\n        for (let i = 0; i < data.length - 1; i += 2) {\r\n            let val = data[i] + ';' + data[i + 1];\r\n            let id = data[i].substr(2,5);\r\n            \r\n            pairsToSave.push([id, val]);\r\n        }\r\n\r\n        let datePairs;\r\n        // Timestamp in js is in ms \r\n        let currentTimestamp = Math.round((new Date()).getTime()).toString();\r\n\r\n        datePairs = pairsToSave.map(pair => {\r\n            return ([pair[0] + \"Date\", currentTimestamp]);\r\n        });\r\n\r\n        try {\r\n            await AsyncStorage.multiSet([...pairsToSave, ...datePairs])\r\n        } catch(e) {\r\n            console.log(\"Error occured while saving data\");\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses downloaded TLE data into satellite objects and stops loading of data.\r\n     * \r\n     * @returns {Array.<SatelliteObject>}\r\n     */\r\n    parseData = () => {\r\n        let satelliteObjects = this.convertTLEtoSatelliteObjectCollection();\r\n        this.loading = false;\r\n\r\n        return satelliteObjects;\r\n    }\r\n\r\n    /**\r\n     * Updates positions of currently visualized satellites.\r\n     */\r\n    updatePositions = () => {\r\n        if (this.state.satellites.length > 0) {\r\n            let copy = [...this.state.satellites]\r\n\r\n            // Sometime there is error in position propagation according to satellite.js documentation\r\n            // so its needed to store IDs of sats which will be later removed\r\n            let removeIDs = [];\r\n\r\n            copy.forEach((sat) => {\r\n                try {\r\n                    sat.updatePosition(new Date(this.clock.time()));\r\n                } catch (error) {\r\n                    removeIDs.push(sat.id);\r\n                    this.props.removeSatelliteCallback(sat.id);\r\n                }\r\n            });\r\n\r\n            let cleaned = [...copy];\r\n            removeIDs.forEach(id => {\r\n                cleaned = cleaned.filter(sat => sat.id !== id);\r\n            });\r\n\r\n            this.setState({ satellites: cleaned });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates rotation of earth (satellites) according to real globe rotation.\r\n     */\r\n    updateRotation = () => {\r\n        const rotationPerSecond = 0.00417807901;\r\n\r\n        let now = this.clock.time();\r\n        let difference = (now - this.lastRotationTime);\r\n\r\n        let additionalRotation = difference * (rotationPerSecond / 1000);\r\n\r\n        let rotation = (-this.state.groundRotationCompensation[1] + additionalRotation);\r\n        rotation = rotation % 360;\r\n\r\n        // Rotate Earth only if rotation is > 1 degreee (faster timescales, or long realtime visualization)\r\n        if (rotation > 1) {\r\n            this.setState({\r\n                groundRotationCompensation: [0, -rotation, 0],\r\n            });\r\n\r\n            this.lastRotationTime = now;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts downloaded TLE data to SatelliteObjects array.\r\n     * \r\n     * @returns {Array.<SatelliteObject>} Converted TLEs into SatelliteObjects\r\n     */\r\n    convertTLEtoSatelliteObjectCollection = () => {\r\n        var tleIndex = 0;\r\n        var idIndex = 0;\r\n        var satrec;\r\n        var satelliteObjects = [];\r\n\r\n        // indexes are += 2 because each TLE has 2 lines\r\n        for (tleIndex = 0; tleIndex < this.tle.length - 1; tleIndex += 2) {\r\n            satrec = satellite.twoline2satrec(this.tle[tleIndex], this.tle[tleIndex + 1]);\r\n            satelliteObjects.push(new SatelliteObject(satrec.satnum, satrec, [this.tle[tleIndex], this.tle[tleIndex + 1]]))\r\n            idIndex += 1;\r\n        }\r\n\r\n        return satelliteObjects;\r\n    }\r\n\r\n    /**\r\n     * Processes click on visualized satelite.\r\n     * \r\n     * @param {string} id ID of clicked satellite\r\n     */\r\n    onModelClick = (id) => {\r\n        let satelliteObject = this.state.satellites.filter((sat) => {\r\n            return sat.id == id;\r\n        })\r\n\r\n        this.props.satelliteClickCallback(satelliteObject);\r\n    }\r\n\r\n    /**\r\n     * Gets material for ground segment visualiziaton based on its ID.\r\n     * \r\n     * @param {number} segmentID ID of ground segment\r\n     * \r\n     * @returns {string} Material name\r\n     */\r\n    getMaterialForGroundSegment = (segmentID) => {\r\n        if (segmentID === 11) {\r\n            return \"red\";\r\n        } else if (segmentID === 12) {\r\n            return \"gold\";\r\n        } else if (segmentID >= 13 && segmentID <= 16) {\r\n            return \"green\";\r\n        } else if (segmentID >= 21 && segmentID <= 26) {\r\n            return \"blue\";\r\n        } else if (segmentID >= 31 && segmentID <= 37) {\r\n            return \"yellow\";\r\n        } else if (segmentID >= 41 && segmentID <= 50) {\r\n            return \"purple\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets position of ground segment with given ID for visualiziation.\r\n     * \r\n     * @param {string} segmentID ID of segment\r\n     * \r\n     * @returns {Array.<number>} Position in ViroCoords\r\n     */\r\n    getPositionForGroundSegment = (segmentID) => {\r\n        let denominator;\r\n\r\n        if (this.props.flatTarget) {\r\n            denominator = 80000;\r\n        } else {\r\n            denominator = 38500;\r\n        }\r\n\r\n        let city = groundSegmentIDtoCity[segmentID];\r\n        let coordsOriginal = groundSegmentEciCoords[city];\r\n\r\n        let x = coordsOriginal.x / denominator;\r\n        let y = coordsOriginal.y / denominator;\r\n        let z = coordsOriginal.z / denominator;\r\n\r\n        // Conversion from ECI to ViroCoords\r\n        return [y, z, x];\r\n    }\r\n\r\n    /**\r\n     * Decides whether enough time, one rotation, has passed for satellite orbit to be updated.\r\n     * \r\n     * @param {string} satID ID of satellite orbit to be checked\r\n     * @param {Date} orbitTime Current time \r\n     * \r\n     * @returns {boolean} Decision whether to update or not\r\n     */\r\n    shouldUpdateOrbit = (satID, orbitTime) => {\r\n        if (!(satID in this.orbitTimestamps)) {\r\n            return true;\r\n        }\r\n\r\n        let maxtime = new Date(this.orbitTimestamps[satID]);\r\n        maxtime.setMinutes(maxtime.getMinutes() + orbitTime);\r\n\r\n        if (this.clock.time() > maxtime) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Maps selected ground segment IDs to models for render.\r\n     * \r\n     * @returns {Array.<ViroSphere>} Array of 3D spheres as position visualization\r\n     */\r\n    getGroundSegmentToRender = () => {\r\n        let segmentList;\r\n\r\n        if (!this.loading) {\r\n            segmentList = this.props.groundSegmentIDs.map((segmentID) => {\r\n                let materialName = this.getMaterialForGroundSegment(segmentID);\r\n                let position = this.getPositionForGroundSegment(segmentID);\r\n\r\n                return (\r\n                    <ViroSphere\r\n                        key={segmentID}\r\n                        heightSegmentCount={8}\r\n                        widthSegmentCount={8}\r\n                        radius={0.006}\r\n                        position={position}\r\n                        materials={[materialName]}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n\r\n        return segmentList;\r\n    }\r\n\r\n    /**\r\n     * Maps selected satellite IDs to models for render.\r\n     * \r\n     * @returns {Array.<ViroSphere|Viro3DObject>} Array of 3D models as satellite visualization\r\n     */\r\n    getSatellitesToRender = () => {\r\n        let modelList;\r\n\r\n        if (!this.loading) {\r\n            modelList = this.state.satellites.map((sat) => {\r\n                if (sat.description === \"DEFAULT\") {\r\n                    return (\r\n                        <ViroSphere\r\n                            key={sat.id}\r\n                            heightSegmentCount={10}\r\n                            widthSegmentCount={10}\r\n                            radius={0.01}\r\n                            position={sat.position}\r\n                            materials={[\"gray\"]}\r\n\r\n                            highAccuracyEvents={false}\r\n                            onClick={() => {\r\n                                this.onModelClick(sat.id);\r\n                            }}\r\n\r\n                            renderingOrder={10}\r\n                        />\r\n                    );\r\n                }\r\n\r\n                return (\r\n                    <Viro3DObject\r\n                        key={sat.id}\r\n                        source={sat.modelPath}\r\n                        resources={sat.resources}\r\n                        position={sat.position}\r\n                        scale={sat.scale}\r\n                        rotation={sat.rotation}\r\n                        type={sat.modelType}\r\n\r\n                        highAccuracyEvents={false}\r\n                        onClick={() => {\r\n                            this.onModelClick(sat.id);\r\n                        }}\r\n\r\n                        renderingOrder={10}\r\n                    />\r\n                )\r\n            });\r\n        }\r\n\r\n        return modelList;\r\n    }\r\n\r\n    /**\r\n     * Maps selected satellite IDs (without excluded ones) to orbits for render.\r\n     * \r\n     * @returns {Array.<ViroPolyline>} Array of Viro Polylines - orbits\r\n     */\r\n    getOrbitsToRender = () => {\r\n        let orbitList;\r\n\r\n        if (!this.loading) {\r\n            orbitList = this.state.satellites.map((sat) => {\r\n                let orbitTime = sat.getOrbitTime();\r\n                if (!this.state.excludedOrbits.includes(sat.id)) {\r\n                    let positions;\r\n\r\n                    if (this.shouldUpdateOrbit(sat.id, orbitTime)) {\r\n                        positions = sat.getPointsForOrbit(this.orbitSegmentCount, new Date(this.clock.time()));\r\n\r\n                        this.orbitPoints[sat.id] = positions;\r\n                        this.orbitTimestamps[sat.id] = this.clock.time();\r\n                    } else {\r\n                        positions = this.orbitPoints[sat.id];\r\n                    }\r\n\r\n                    return (\r\n                        <ViroPolyline\r\n                            key={sat.id}\r\n                            position={[0, 0, 0]}\r\n                            points={positions}\r\n                            thickness={0.001}\r\n                            materials={\"red\"}\r\n                            opacity={this.state.orbitOpacity}\r\n                        />\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        return orbitList;\r\n    }\r\n\r\n    /**\r\n     * Renders flat target version of augumented globe.\r\n     * \r\n     * @returns {ViroNode} Globe with all satelites and orbits.\r\n     */\r\n    renderFlatTargetGlobe = () => {\r\n        let modelList = this.getSatellitesToRender();\r\n        let groundSegmentList = this.getGroundSegmentToRender();\r\n        let orbitsList = this.getOrbitsToRender();\r\n\r\n        return (\r\n            <ViroNode position={[0, 0.2, 0]}>\r\n                <ViroAmbientLight color=\"#FFFFFF\" intensity={2000} temperature={4000} />\r\n\r\n                <Viro3DObject source={require('../res/earth.obj')}\r\n                    resources={[require('../res/earth.mtl'),\r\n                    require('../res/earth_texture.png')]}\r\n                    position={[0.0, 0.0, 0.0]}\r\n                    scale={[0.04, 0.04, 0.04]}\r\n                    rotation={[180, 180, -180]}\r\n                    type=\"OBJ\"\r\n                />\r\n\r\n                <ViroNode rotation={this.modelListRotation}>\r\n                    {groundSegmentList}\r\n\r\n                    <ViroNode rotation={this.state.groundRotationCompensation}>\r\n                        {modelList}\r\n                        {orbitsList}\r\n                    </ViroNode>\r\n                </ViroNode>\r\n            </ViroNode>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders full 3D model of Earth or only its transparent version but with occlusive properties. \r\n     * \r\n     * @returns {<Viro3DObject|ViroNode} Globe for globe target\r\n     */\r\n    renderVirtualGlobe = () => {\r\n        if (this.props.renderVirtualGlobe) {\r\n            return (\r\n                <Viro3DObject source={require('../res/earth.obj')}\r\n                    resources={[require('../res/earth.mtl'),\r\n                    require('../res/earth_texture.png')]}\r\n                    position={[0.0, 0.0, 0.0]}\r\n                    scale={[0.08, 0.08, 0.08]}\r\n                    rotation={[180, -150, -180]}  // Rotated that africa is towards camera\r\n                    type=\"OBJ\"\r\n                />\r\n            );\r\n        } else {\r\n\r\n            return (\r\n                <ViroNode>\r\n                    <ViroSphere\r\n                        heightSegmentCount={20}\r\n                        widthSegmentCount={20}\r\n                        radius={0.17}\r\n                        position={[0, 0, 0]}\r\n                        materials={[\"occlusive\"]}\r\n                        renderingOrder={-1}\r\n                    />\r\n\r\n                    <Viro3DObject source={require('../res/ghostEarth/untitled.obj')}\r\n                        resources={[require('../res/ghostEarth/untitled.mtl'),\r\n                        require('../res/ghostEarth/untitled.png')]}\r\n                        position={[0.0, 0.0, 0.0]}\r\n                        scale={[0.18, 0.18, 0.18]}\r\n                        rotation={[0, -175, 0]}  // rotated that africa is towards camera\r\n                        type=\"OBJ\"\r\n                        opacity={0.3}\r\n                    />\r\n                </ViroNode>\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders globe target version of augumented globe.\r\n     * \r\n     * @returns {ViroNode} Globe with all satelites and orbits.\r\n     */\r\n    renderGlobeTargetGlobe = () => {\r\n        let modelList = this.getSatellitesToRender();\r\n        let groundSegmentList = this.getGroundSegmentToRender();\r\n        let orbitsList = this.getOrbitsToRender();\r\n\r\n        return (\r\n            <ViroNode>\r\n                <ViroAmbientLight color=\"#FFFFFF\" />\r\n\r\n                {this.renderVirtualGlobe()}\r\n\r\n                <ViroNode rotation={this.modelListRotation}>\r\n                    {groundSegmentList}\r\n\r\n                    <ViroNode rotation={this.state.groundRotationCompensation}>\r\n                        {modelList}\r\n                        {orbitsList}\r\n                    </ViroNode>\r\n                </ViroNode>\r\n            </ViroNode>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Decides whether to render flat or globe target globe.\r\n     * \r\n     * @returns {ViroNode} Correct globe with all orbits, satellites and ground segments.\r\n     */\r\n    renderGlobe = () => {\r\n        if (this.props.flatTarget) {\r\n            return this.renderFlatTargetGlobe();\r\n        } else {\r\n            return this.renderGlobeTargetGlobe();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders whole component - visualization\r\n     * \r\n     * @returns {ViroNode} Globe visualization\r\n     */\r\n    render() {\r\n        return (\r\n            <ViroNode>\r\n                {this.renderGlobe()}\r\n            </ViroNode>\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * ECI cooardinates of cities with GPS ground segments.\r\n * \r\n * @constant\r\n * @type {Object<string, Object<string, number>>}\r\n */\r\nconst groundSegmentEciCoords = {\r\n    \"schriever\": { \"x\": 3910.3096787548093, \"y\": 3080.3510329695946, \"z\": 3975.5813422691904 },\r\n    \"vandenberg\": { \"x\": 4856.790504752817, \"y\": 1985.1370670602403, \"z\": 3615.737268949631 },\r\n    \"cape\": { \"x\": 2619.008345543573, \"y\": 4961.851777391096, \"z\": 3024.8968340995298 },\r\n    \"ascension\": { \"x\": -3922.7604262692257, \"y\": 4952.862829619637, \"z\": -875.6544312352279 },\r\n    \"diego\": { \"x\": -5170.553732498662, \"y\": -3647.0385227647125, \"z\": -806.8053933403049 },\r\n    \"kwajalein\": { \"x\": 4093.666061017764, \"y\": -4796.201022830874, \"z\": 960.7141097469664 },\r\n    \"hawaii\": { \"x\": 5786.235355097538, \"y\": -1500.9790587172447, \"z\": 2219.0532011295636 },\r\n    \"greenland\": { \"x\": 410.97339412324754, \"y\": 1434.4349979707606, \"z\": 6181.170740804261 },\r\n    \"hampshire\": { \"x\": 1493.91674263956, \"y\": 4359.107545377384, \"z\": 4396.24767788034 },\r\n    \"britain\": { \"x\": -3078.574521370201, \"y\": 2465.378033770742, \"z\": 4996.687333000982 },\r\n    \"guam\": { \"x\": 1865.487956036825, \"y\": -5918.882386479585, \"z\": 1470.730166121755 },\r\n    \"alaska\": { \"x\": 3016.4701519528826, \"y\": -219.03495480709444, \"z\": 5597.555648180364 },\r\n    \"washington\": { \"x\": 2046.1450152058833, \"y\": 4528.634340221239, \"z\": 3986.0421024686416 },\r\n    \"ecuador\": { \"x\": 2779.402343452063, \"y\": 5740.560921023602, \"z\": -107.89682911058405 },\r\n    \"uruguay\": { \"x\": 304.42572961808673, \"y\": 5325.040877018454, \"z\": -3487.141934869165 },\r\n    \"africa\": { \"x\": -5848.400376263067, \"y\": 1424.0113052546715, \"z\": -2104.612547103142 },\r\n    \"bahrain\": { \"x\": -5582.67664844856, \"y\": -1318.6034421675904, \"z\": 2780.958250256032 },\r\n    \"korea\": { \"x\": 46.677236661753795, \"y\": -5091.781885528575, \"z\": 3829.3084077342232 },\r\n    \"australia\": { \"x\": 1033.5451370010423, \"y\": -5204.347927342779, \"z\": -3528.946706348021 },\r\n    \"zealand\": { \"x\": 3451.4932197311496, \"y\": -3264.5169253457175, \"z\": -4242.601519256618 }\r\n}\r\n\r\n/**\r\n * Specifies city of ground segment by ID.\r\n * \r\n * @constant\r\n * @type {Object<number, string>}\r\n */\r\nconst groundSegmentIDtoCity = {\r\n    11: \"schriever\",\r\n    12: \"vandenberg\",\r\n    13: \"cape\",\r\n    14: \"ascension\",\r\n    15: \"diego\",\r\n    16: \"kwajalein\",\r\n\r\n    21: \"hawaii\",\r\n    22: \"schriever\",\r\n    23: \"cape\",\r\n    24: \"ascension\",\r\n    25: \"diego\",\r\n    26: \"kwajalein\",\r\n\r\n    31: \"greenland\",\r\n    32: \"hampshire\",\r\n    33: \"vandenberg\",\r\n    34: \"hawaii\",\r\n    35: \"britain\",\r\n    36: \"diego\",\r\n    37: \"guam\",\r\n\r\n    41: \"alaska\",\r\n    42: \"washington\",\r\n    43: \"ecuador\",\r\n    44: \"uruguay\",\r\n    45: \"britain\",\r\n    46: \"africa\",\r\n    47: \"bahrain\",\r\n    48: \"korea\",\r\n    49: \"australia\",\r\n    50: \"zealand\"\r\n}\r\n\r\n// Definition of materials for 3D objects rendering.\r\nViroMaterials.createMaterials({\r\n    gray: {\r\n        shininess: 2.0,\r\n        lightingModel: \"Lambert\",\r\n        diffuseColor: \"#A9A9A9\",\r\n    },\r\n    earth: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseTexture: require('../res/earth_texture.png'),\r\n    },\r\n    iss: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseColor: '#6e6e6e'\r\n    },\r\n    occlusive: {\r\n        diffuseColor: \"#FFFFFFFF\",\r\n        colorWriteMask: [\"None\"],\r\n    },\r\n    red: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseColor: '#AF0606'\r\n    },\r\n    gold: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseColor: '#FFC300'\r\n    },\r\n    green: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseColor: '#06AF48'\r\n    },\r\n    blue: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseColor: '#067EAF'\r\n    },\r\n    yellow: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseColor: '#F4F71A'\r\n    },\r\n    purple: {\r\n        lightingModel: \"Blinn\",\r\n        diffuseColor: '#7504AC'\r\n    }\r\n});\r\n",
    "static": true,
    "longname": "C:/Users/Vojcek/Desktop/BP/CODES/satviz/js/components/Globe.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "variable",
    "name": "satellite",
    "memberof": "satviz/js/components/Globe.js",
    "static": true,
    "longname": "satviz/js/components/Globe.js~satellite",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/components/Globe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "variable",
    "name": "Clock",
    "memberof": "satviz/js/components/Globe.js",
    "static": true,
    "longname": "satviz/js/components/Globe.js~Clock",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/components/Globe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "class",
    "name": "Globe",
    "memberof": "satviz/js/components/Globe.js",
    "static": true,
    "longname": "satviz/js/components/Globe.js~Globe",
    "access": "public",
    "export": true,
    "importPath": "satviz/satviz/js/components/Globe.js",
    "importStyle": "Globe",
    "description": "Component representing virtual globe with satellites.",
    "lineNumber": 33,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 113,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "state",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#state",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "{\"satellites\": *, \"currentSatelliteIDs\": *, \"excludedOrbits\": *, \"orbitOpacity\": number, \"groundRotationCompensation\": *}"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "modelListRotation",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#modelListRotation",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "ST",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#ST",
    "access": "public",
    "description": "SpaceTrack object for getting data from Satellite Catalog",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "SpaceTrack"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "loading",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#loading",
    "access": "public",
    "description": "State of globe data loading",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "orbitSegmentCount",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#orbitSegmentCount",
    "access": "public",
    "description": "Number of segments in one orbit",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "orbitTimestamps",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#orbitTimestamps",
    "access": "public",
    "description": "Timestamps of orbits starting times ",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "orbitPoints",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#orbitPoints",
    "access": "public",
    "description": "Points of satellite orbits ",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "clock",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#clock",
    "access": "public",
    "description": "Globe custom clock with special functions",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "Clock"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "lastRotationTime",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#lastRotationTime",
    "access": "public",
    "description": "Last globe rotation time for optimized rotating",
    "lineNumber": 90,
    "type": {
      "nullable": null,
      "types": [
        "Clock.time"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "moveTimer",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#moveTimer",
    "access": "public",
    "description": "Timer for satellite motion simulation",
    "lineNumber": 93,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "rotationTimer",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#rotationTimer",
    "access": "public",
    "description": "Timer for globe rotation simulation",
    "lineNumber": 95,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "prevState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "tle",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#tle",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "getTLEsFromWebAndStorage",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#getTLEsFromWebAndStorage",
    "access": "public",
    "description": "Gets TLEs of satellites with given ids from web service or from async storage.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<string>} TLE lines in format [TLE1 line1, TLE1 line2, TLE2 line1, ...]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "ID of the satellites for which we want to obtain TLEs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": "TLE lines in format [TLE1 line1, TLE1 line2, TLE2 line1, ...]"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "formatTLEFromAsyncStorage",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#formatTLEFromAsyncStorage",
    "access": "public",
    "description": "Formats TLEs for using from data obtained from Async Storage.",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<string>} Formated TLE data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "TLE data from Async Storage"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": "Formated TLE data"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "saveTLEsToAsyncStorage",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#saveTLEsToAsyncStorage",
    "access": "public",
    "description": "Saves TLE data to Async Storage in correct format.",
    "lineNumber": 259,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "TLE data to store in Async Storage"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "parseData",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#parseData",
    "access": "public",
    "description": "Parses downloaded TLE data into satellite objects and stops loading of data.",
    "lineNumber": 290,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<SatelliteObject>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<SatelliteObject>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "updatePositions",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#updatePositions",
    "access": "public",
    "description": "Updates positions of currently visualized satellites.",
    "lineNumber": 300,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "updateRotation",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#updateRotation",
    "access": "public",
    "description": "Updates rotation of earth (satellites) according to real globe rotation.",
    "lineNumber": 329,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "convertTLEtoSatelliteObjectCollection",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#convertTLEtoSatelliteObjectCollection",
    "access": "public",
    "description": "Converts downloaded TLE data to SatelliteObjects array.",
    "lineNumber": 355,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<SatelliteObject>} Converted TLEs into SatelliteObjects"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<SatelliteObject>"
      ],
      "spread": false,
      "description": "Converted TLEs into SatelliteObjects"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "onModelClick",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#onModelClick",
    "access": "public",
    "description": "Processes click on visualized satelite.",
    "lineNumber": 376,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of clicked satellite"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "getMaterialForGroundSegment",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#getMaterialForGroundSegment",
    "access": "public",
    "description": "Gets material for ground segment visualiziaton based on its ID.",
    "lineNumber": 391,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Material name"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "segmentID",
        "description": "ID of ground segment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Material name"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "getPositionForGroundSegment",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#getPositionForGroundSegment",
    "access": "public",
    "description": "Gets position of ground segment with given ID for visualiziation.",
    "lineNumber": 414,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<number>} Position in ViroCoords"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "segmentID",
        "description": "ID of segment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<number>"
      ],
      "spread": false,
      "description": "Position in ViroCoords"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "shouldUpdateOrbit",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#shouldUpdateOrbit",
    "access": "public",
    "description": "Decides whether enough time, one rotation, has passed for satellite orbit to be updated.",
    "lineNumber": 442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Decision whether to update or not"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "satID",
        "description": "ID of satellite orbit to be checked"
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "orbitTime",
        "description": "Current time"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Decision whether to update or not"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "getGroundSegmentToRender",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#getGroundSegmentToRender",
    "access": "public",
    "description": "Maps selected ground segment IDs to models for render.",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ViroSphere>} Array of 3D spheres as position visualization"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ViroSphere>"
      ],
      "spread": false,
      "description": "Array of 3D spheres as position visualization"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "getSatellitesToRender",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#getSatellitesToRender",
    "access": "public",
    "description": "Maps selected satellite IDs to models for render.",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ViroSphere|Viro3DObject>} Array of 3D models as satellite visualization"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ViroSphere|Viro3DObject>"
      ],
      "spread": false,
      "description": "Array of 3D models as satellite visualization"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "getOrbitsToRender",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#getOrbitsToRender",
    "access": "public",
    "description": "Maps selected satellite IDs (without excluded ones) to orbits for render.",
    "lineNumber": 545,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ViroPolyline>} Array of Viro Polylines - orbits"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ViroPolyline>"
      ],
      "spread": false,
      "description": "Array of Viro Polylines - orbits"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "renderFlatTargetGlobe",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#renderFlatTargetGlobe",
    "access": "public",
    "description": "Renders flat target version of augumented globe.",
    "lineNumber": 585,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ViroNode} Globe with all satelites and orbits."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ViroNode"
      ],
      "spread": false,
      "description": "Globe with all satelites and orbits."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "renderVirtualGlobe",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#renderVirtualGlobe",
    "access": "public",
    "description": "Renders full 3D model of Earth or only its transparent version but with occlusive properties. ",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{<Viro3DObject|ViroNode} Globe for globe target"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "<Viro3DObject",
        "ViroNode"
      ],
      "spread": false,
      "description": "Globe for globe target"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "renderGlobeTargetGlobe",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#renderGlobeTargetGlobe",
    "access": "public",
    "description": "Renders globe target version of augumented globe.",
    "lineNumber": 664,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ViroNode} Globe with all satelites and orbits."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ViroNode"
      ],
      "spread": false,
      "description": "Globe with all satelites and orbits."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "renderGlobe",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#renderGlobe",
    "access": "public",
    "description": "Decides whether to render flat or globe target globe.",
    "lineNumber": 692,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ViroNode} Correct globe with all orbits, satellites and ground segments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ViroNode"
      ],
      "spread": false,
      "description": "Correct globe with all orbits, satellites and ground segments."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "render",
    "memberof": "satviz/js/components/Globe.js~Globe",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/components/Globe.js~Globe#render",
    "access": "public",
    "description": "Renders whole component - visualization",
    "lineNumber": 705,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ViroNode} Globe visualization"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ViroNode"
      ],
      "spread": false,
      "description": "Globe visualization"
    },
    "params": []
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "groundSegmentEciCoords",
    "memberof": "satviz/js/components/Globe.js",
    "static": true,
    "longname": "satviz/js/components/Globe.js~groundSegmentEciCoords",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/components/Globe.js",
    "importStyle": null,
    "description": "ECI cooardinates of cities with GPS ground segments.",
    "lineNumber": 720,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, Object<string, number>>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "groundSegmentIDtoCity",
    "memberof": "satviz/js/components/Globe.js",
    "static": true,
    "longname": "satviz/js/components/Globe.js~groundSegmentIDtoCity",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/components/Globe.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 749,
    "undocument": true,
    "type": {
      "types": [
        "{\"11\": string, \"12\": string, \"13\": string, \"14\": string, \"15\": string, \"16\": string, \"21\": string, \"22\": string, \"23\": string, \"24\": string, \"25\": string, \"26\": string, \"31\": string, \"32\": string, \"33\": string, \"34\": string, \"35\": string, \"36\": string, \"37\": string, \"41\": string, \"42\": string, \"43\": string, \"44\": string, \"45\": string, \"46\": string, \"47\": string, \"48\": string, \"49\": string, \"50\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "satviz/js/SatelliteObject.js",
    "content": "/** \r\n *  @fileOverview Representation of object behind satellite. \r\n *\r\n *  @author       Vojtěch Pospíšil\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* Dictionary of satellite desciption used in other functions.\r\n* @constant\r\n*\r\n* @type {Object<string, string>}\r\n*/\r\nconst descriptions = {\r\n    25544: \"ISS\",\r\n\r\n    24876: \"GPS\",\r\n    25933: \"GPS\",\r\n    26360: \"GPS\",\r\n    26407: \"GPS\",\r\n    26605: \"GPS\",\r\n    27663: \"GPS\",\r\n    27704: \"GPS\",\r\n    28129: \"GPS\",\r\n    28190: \"GPS\",\r\n    28361: \"GPS\",\r\n    28474: \"GPS\",\r\n    28874: \"GPS\",\r\n    29486: \"GPS\",\r\n    29601: \"GPS\",\r\n    32260: \"GPS\",\r\n    32384: \"GPS\",\r\n    32711: \"GPS\",\r\n    35752: \"GPS\",\r\n    36585: \"GPS\",\r\n    37753: \"GPS\",\r\n    38833: \"GPS\",\r\n    39166: \"GPS\",\r\n    39533: \"GPS\",\r\n    39741: \"GPS\",\r\n    40105: \"GPS\",\r\n    40294: \"GPS\",\r\n    40534: \"GPS\",\r\n    40730: \"GPS\",\r\n    41019: \"GPS\",\r\n    41328: \"GPS\",\r\n    43873: \"GPS\",\r\n}\r\n\r\n/**\r\n* Dictionary of special satellite model requirements.\r\n* @constant\r\n*\r\n* @type {Object<string, NodeRequire>}\r\n*/\r\nconst models = {\r\n    \"ISS\": require('./res/models/iss/ISS.glb'),\r\n    \"GPS\": require('./res/models/gps/gps.obj'),\r\n}\r\n\r\n/**\r\n* Dictionary of special satellite model material requirements.\r\n* @constant\r\n*\r\n* @type {Object<string, NodeRequire>}\r\n*/\r\nconst materials = {\r\n    \"GPS\": require('./res/models/gps/gps.mtl'),\r\n}\r\n\r\n/**\r\n * Dictionary of special satellite model material requirements.\r\n * @constant\r\n *\r\n * @type {Object<string, NodeRequire>}\r\n */\r\nconst textures = {\r\n    \"GPS\": require('./res/models/Satellite.mtl'),\r\n}\r\n\r\n/**\r\n * Dictionary of satellite model scales.\r\n * @constant\r\n *\r\n * @type {Object<string, Array.<number>>}\r\n */\r\nconst scales = {\r\n    \"ISS\": [0.1, 0.1, 0.1],\r\n    \"GPS\": [0.03, 0.03, 0.03],\r\n    \"DEFAULT\": [0.0005, 0.0005, 0.0005],\r\n}\r\n\r\n/**\r\n * Dictionary of satellite model rotation.\r\n * @constant\r\n *\r\n * @type {Object<string, Array.<number>>}\r\n */\r\nconst rotations = {\r\n    \"ISS\": [0, 90, 0],\r\n    \"GPS\": [0.0, 0.0, 0.0],\r\n    \"DEFAULT\": [0.0, 0.0, 0.0],\r\n}\r\n\r\n/**\r\n * Dictionary of satellite model types (extensions).\r\n * @constant\r\n *\r\n * @type {Object<string, string>}\r\n */\r\nconst modelTypes = {\r\n    \"ISS\": \"GLB\",\r\n    \"GPS\": \"OBJ\",\r\n}\r\n\r\nvar satellite = require('satellite.js');\r\n\r\n/**\r\n * Object representing space satellite.\r\n */\r\nexport default class SatelliteObject {\r\n\r\n    /**\r\n     * Constructs a satelite object with given properties.\r\n     * \r\n     * @param {string} id ID of satellite from Satellite Catalog\r\n     * @param {Object} satelliteRecord Satellite record of satellite from satellite.js\r\n     * @param {string} tle String version of TLE record\r\n     */\r\n    constructor(id, satelliteRecord, tle) {\r\n        /** ID of satellite in satellite catalog\r\n         *  @type {string} */\r\n        this.id = id;\r\n        /** TLE record of satellite \r\n         * @type {string} */\r\n        this.tle = tle;\r\n        /** Satellite record from satellite.js \r\n         * @type {Object} */\r\n        this.satelliteRecord = satelliteRecord;\r\n        /** Time of last satellite position \r\n         * @type {Object} */\r\n        this.time = null;\r\n\r\n        /** Description of satellite type \r\n         * @type {string} */\r\n        this.description = this.getDescription();\r\n        /** Require of satellite 3D model\r\n         *  @type {NodeRequire}*/\r\n        this.modelPath = models[this.description];\r\n        /** Model type (extension) \r\n         * @type {string} */\r\n        this.modelType = modelTypes[this.description];\r\n        /** All requirements of satellite 3D model \r\n         * @type {Array<NodeRequire>} */\r\n        this.resources = this.getResources();\r\n\r\n        /** Remmaped position of satellite in Viro Coords \r\n         * @type {Array<number>} */\r\n        this.position = [0.0, 0.0, 0.0];\r\n        /** Position of satellite in ECI coords \r\n         * @type {Array<number>} */\r\n        this.positionEci = null;\r\n        /** Scale of satellite model \r\n         * @type {Array<number>} */\r\n        this.scale = scales[this.description];\r\n        /** Rotation of satellite model\r\n         *  @type {Array<number>} */\r\n        this.rotation = rotations[this.description];\r\n        /** Velocity of satellite model in XYZ direction \r\n         * @type {Object<string, number>} */\r\n        this.velocity = {};\r\n    }\r\n\r\n    /**\r\n     * Gathers all needed resources for satellite model.\r\n     * \r\n     * @returns {Array<NodeRequire>} Array of all satellite model additional requirements.\r\n     */\r\n    getResources = () => {\r\n        let material = this.getMaterialPath();\r\n        let texture = this.getTexturePath();\r\n\r\n        let resources = [];\r\n\r\n        if (material !== null) {\r\n            resources.push(material);\r\n        }\r\n\r\n        if (texture !== null) {\r\n            resources.push(texture);\r\n        }\r\n\r\n        return resources;\r\n    }\r\n\r\n    /**\r\n     * Returns material needed by model specified in material dict.\r\n     * \r\n     * @returns {NodeRequire} Requirement or null when nothing special is needed.\r\n     */\r\n    getMaterialPath = () => {\r\n        if (this.description in materials) {\r\n            return materials[this.description];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns texture needed by model specified in texture dict.\r\n     * \r\n     * @returns {NodeRequire} Requirement or null when nothing special is needed.\r\n     */\r\n    getTexturePath = () => {\r\n        if (this.description in textures) {\r\n            return textures[this.description];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns desciption string of model specified in description dict.\r\n     * \r\n     * @returns {string} Description or DEFAULT if not defined.\r\n     */\r\n    getDescription = () => {\r\n        if (this.id in descriptions) {\r\n            return descriptions[this.id];\r\n        } else {\r\n            return \"DEFAULT\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates satellite position to position in given time.\r\n     * \r\n     * @param {Object} datetime Javascript date object.\r\n     */\r\n    updatePosition = (datetime) => {\r\n        let propagation = satellite.propagate(this.satelliteRecord, datetime);\r\n\r\n        this.time = datetime;\r\n        this.velocity = propagation.velocity;\r\n        this.positionEci = propagation.position;\r\n        this.position = this.mapPositionToRange(propagation.position);\r\n    }\r\n\r\n    /**\r\n     * Remaps position value into displayable values in coords used by viro react.\r\n     * \r\n     * @param {Array<number>} value Position in [X, Y, Z] format.\r\n     * \r\n     * @returns {Array<number>} Remapped position in [Y, Z, X] format (Viro coords).\r\n     */\r\n    mapPositionToRange = (value) => {\r\n        const denominator = 25000;\r\n        const base = 10000;\r\n\r\n        let x = value.x / denominator;\r\n        let y = value.y / denominator;\r\n        let z = value.z / denominator;\r\n\r\n        /*\r\n        x = Math.log(Math.abs(value.x)) / Math.log(base);\r\n        y = Math.log(Math.abs(value.y)) / Math.log(base);\r\n        z = Math.log(Math.abs(value.z)) / Math.log(base);\r\n\r\n        value.x < 0 ? x = -x : x = x;\r\n        value.y < 0 ? y = -y : y = y;\r\n        value.z < 0 ? z = -z : z = z; */\r\n\r\n        // conversion from eci to viro coords\r\n        return [y, z, x];\r\n    }\r\n\r\n    /**\r\n     * Formats given data to strings with correct units.\r\n     * \r\n     * @param {Object<string, any>} data Dictionary with data to be formated.\r\n     * \r\n     * @returns {Object<string, string>} Dictionary with data correctly formated for display. \r\n     */\r\n    formatSelectedDataForModal = (data) => {\r\n        let formated = {};\r\n        formated.id = data.id.toString(); // NORAD ID\r\n        formated.intlDes = data.intlDes.toString(); // INTL DESIGNATOR (year, number of launch, piece of launch)\r\n        formated.apogee = data.apogee.toFixed(2).toString() + ' km';\r\n        formated.perigee = data.perigee.toFixed(2).toString() + ' km';\r\n        formated.inclination = this.deg_to_dms(this.radians_to_degrees(data.inclination));\r\n        formated.latitude = satellite.degreesLat(data.positionGeodetic.latitude).toFixed(3);\r\n        formated.longitude = satellite.degreesLong(data.positionGeodetic.longitude).toFixed(3);\r\n        formated.height = data.positionGeodetic.height.toFixed(2).toString() + ' km';\r\n        formated.velocity = data.velocity.toFixed(2).toString() + ' km/s';\r\n        formated.period = data.period.toFixed(0).toString() + ' min';\r\n\r\n        return formated;\r\n    }\r\n\r\n    /**\r\n     * Calculates data needed in information modal window.\r\n     * \r\n     * @returns {Object<string, any>} Dictionary of formated data for usage directly in info modal\r\n     */\r\n    getDataForInfoModal = () => {\r\n        let data = {};\r\n        data.id = this.id;\r\n        data.intlDes = this.getIntlDes();\r\n        data.inclination = this.satelliteRecord.inclo;  // Rads\r\n        data.eccentricity = this.satelliteRecord.ecco;\r\n        data.raan = this.satelliteRecord.nodeo;   // Rads\r\n        data.argPe = this.satelliteRecord.argpo;  // Rads\r\n        data.meanMotion = this.satelliteRecord.no * 60 * 24 / (2 * Math.PI);     // Convert rads/minute to rev/day\r\n\r\n        data.semiMajorAxis = Math.pow(8681663.653 / data.meanMotion, (2 / 3));\r\n        data.semiMinorAxis = data.semiMajorAxis * Math.sqrt(1 - Math.pow(data.eccentricity, 2));\r\n        data.apogee = data.semiMajorAxis * (1 + data.eccentricity) - 6371;\r\n        data.perigee = data.semiMajorAxis * (1 - data.eccentricity) - 6371;\r\n        data.period = 1440.0 / data.meanMotion;\r\n\r\n        // Geodetic position requires GMST time (http://en.wikipedia.org/wiki/Sidereal_time#Definition)\r\n        let gmst = satellite.gstime(new Date(this.time));\r\n        data.positionGeodetic = satellite.eciToGeodetic(this.positionEci, gmst);\r\n\r\n        data.velocity = Math.sqrt(Math.pow(this.velocity.x, 2) + Math.pow(this.velocity.y, 2) + Math.pow(this.velocity.z, 2));\r\n\r\n        return this.formatSelectedDataForModal(data);\r\n    }\r\n\r\n    /**\r\n     * Calculates orbit time of satellite in minutes\r\n     * \r\n     * @returns {number} Orbit time in minutes\r\n     */\r\n    getOrbitTime = () => {\r\n        return (1440.0 / this.satelliteRecord.no * 60 * 24 / (2 * Math.PI));\r\n    }\r\n\r\n    /**\r\n     * Calculates points through one satellite orbit in future (first point is duplicatedat the edn of array).\r\n     * \r\n     * @param {number} numSegments Number of points (segments) in one orbit.\r\n     * @param {any} currentDate Current date / starting date of orbit. \r\n     * \r\n     * @returns {Array<Array<number>>} Array of [x, y, z] positions of points.\r\n     */\r\n    getPointsForOrbit = (numSegments, currentDate) => {\r\n        // in minutes\r\n        let orbitPeriod = 1440.0 / (this.satelliteRecord.no * 60 * 24 / (2 * Math.PI));\r\n        let timeStep = orbitPeriod / numSegments;\r\n\r\n        let startDate = new Date(currentDate);\r\n\r\n        let positions = [];\r\n        for (let i = 0; i <= numSegments; i++) {\r\n            let date = new Date(startDate);\r\n            // Move date by one \"segment duration\"\r\n            date.setMinutes(startDate.getMinutes() + (i * timeStep));\r\n\r\n            let position = satellite.propagate(this.satelliteRecord, date).position;\r\n            positions.push(this.mapPositionToRange(position))\r\n        }\r\n\r\n        // Repeat first point at the end because of ViroPolyline\r\n        positions.push(positions[0]);\r\n\r\n        return positions;\r\n    }\r\n\r\n    /**\r\n     * Composes International Designator of satellite.\r\n     * \r\n     * @returns {string} ITLDES of satellite\r\n     */\r\n    getIntlDes = () => {\r\n        let des = '';\r\n\r\n        let year = this.tle[0].substring(9, 11);\r\n        let prefix = (year > 50) ? '19' : '20';\r\n        year = prefix + year;\r\n\r\n        let rest = this.tle[0].substring(11, 16);\r\n        des = year + '-' + rest;\r\n\r\n        return des;\r\n    }\r\n\r\n    /**\r\n     * Converts degrees to d° m' s\" format.\r\n     * https://stackoverflow.com/questions/5786025/decimal-degrees-to-degrees-minutes-and-seconds-in-javascript/5786627#5786627\r\n     * \r\n     * @param {number} deg Value in degrees\r\n     * \r\n     * @returns {string} Formated degree value (d° m' s\")\r\n     */\r\n    deg_to_dms = (deg) => {\r\n        var d = Math.floor(deg);\r\n        var minfloat = (deg - d) * 60;\r\n        var m = Math.floor(minfloat);\r\n        var secfloat = (minfloat - m) * 60;\r\n        var s = Math.round(secfloat);\r\n        // After rounding, the seconds might become 60. These two if-tests are not necessary if no rounding is done.\r\n        if (s == 60) {\r\n            m++;\r\n            s = 0;\r\n        }\r\n        if (m == 60) {\r\n            d++;\r\n            m = 0;\r\n        }\r\n        return (\"\" + d + \"° \" + m + \"' \" + s + \"\\\"\");\r\n    }\r\n\r\n    /**\r\n     * Converts radian value to degree value.\r\n     * \r\n     * @param {number} radians Value in radians\r\n     * \r\n     * @returns {number} Value in degrees\r\n     */\r\n    radians_to_degrees = (radians) => {\r\n        return radians * (180 / Math.PI);\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Vojcek/Desktop/BP/CODES/satviz/js/SatelliteObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "descriptions",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~descriptions",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": null,
    "description": "Dictionary of satellite desciption used in other functions.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "models",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~models",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "{\"ISS\": *, \"GPS\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "variable",
    "name": "materials",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~materials",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "{\"GPS\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "textures",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~textures",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "{\"GPS\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "variable",
    "name": "scales",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~scales",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "{\"ISS\": *, \"GPS\": *, \"DEFAULT\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "variable",
    "name": "rotations",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~rotations",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "{\"ISS\": *, \"GPS\": *, \"DEFAULT\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "modelTypes",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~modelTypes",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "{\"ISS\": string, \"GPS\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "satellite",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~satellite",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "class",
    "name": "SatelliteObject",
    "memberof": "satviz/js/SatelliteObject.js",
    "static": true,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject",
    "access": "public",
    "export": true,
    "importPath": "satviz/satviz/js/SatelliteObject.js",
    "importStyle": "SatelliteObject",
    "description": "Object representing space satellite.",
    "lineNumber": 122,
    "interface": false
  },
  {
    "__docId__": 163,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#constructor",
    "access": "public",
    "description": "Constructs a satelite object with given properties.",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of satellite from Satellite Catalog"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "satelliteRecord",
        "description": "Satellite record of satellite from satellite.js"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tle",
        "description": "String version of TLE record"
      }
    ]
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "id",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#id",
    "access": "public",
    "description": "ID of satellite in satellite catalog",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "tle",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#tle",
    "access": "public",
    "description": "TLE record of satellite ",
    "lineNumber": 137,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "satelliteRecord",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#satelliteRecord",
    "access": "public",
    "description": "Satellite record from satellite.js ",
    "lineNumber": 140,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "time",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#time",
    "access": "public",
    "description": "Time of last satellite position ",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "description",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#description",
    "access": "public",
    "description": "Description of satellite type ",
    "lineNumber": 147,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "modelPath",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#modelPath",
    "access": "public",
    "description": "Require of satellite 3D model",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "NodeRequire"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "modelType",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#modelType",
    "access": "public",
    "description": "Model type (extension) ",
    "lineNumber": 153,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "resources",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#resources",
    "access": "public",
    "description": "All requirements of satellite 3D model ",
    "lineNumber": 156,
    "type": {
      "nullable": null,
      "types": [
        "Array<NodeRequire>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "position",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#position",
    "access": "public",
    "description": "Remmaped position of satellite in Viro Coords ",
    "lineNumber": 160,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "positionEci",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#positionEci",
    "access": "public",
    "description": "Position of satellite in ECI coords ",
    "lineNumber": 163,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "scale",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#scale",
    "access": "public",
    "description": "Scale of satellite model ",
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "rotation",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#rotation",
    "access": "public",
    "description": "Rotation of satellite model",
    "lineNumber": 169,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "velocity",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#velocity",
    "access": "public",
    "description": "Velocity of satellite model in XYZ direction ",
    "lineNumber": 172,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "getResources",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#getResources",
    "access": "public",
    "description": "Gathers all needed resources for satellite model.",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<NodeRequire>} Array of all satellite model additional requirements."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<NodeRequire>"
      ],
      "spread": false,
      "description": "Array of all satellite model additional requirements."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "getMaterialPath",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#getMaterialPath",
    "access": "public",
    "description": "Returns material needed by model specified in material dict.",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{NodeRequire} Requirement or null when nothing special is needed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NodeRequire"
      ],
      "spread": false,
      "description": "Requirement or null when nothing special is needed."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "getTexturePath",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#getTexturePath",
    "access": "public",
    "description": "Returns texture needed by model specified in texture dict.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{NodeRequire} Requirement or null when nothing special is needed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "NodeRequire"
      ],
      "spread": false,
      "description": "Requirement or null when nothing special is needed."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "getDescription",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#getDescription",
    "access": "public",
    "description": "Returns desciption string of model specified in description dict.",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Description or DEFAULT if not defined."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Description or DEFAULT if not defined."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "updatePosition",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#updatePosition",
    "access": "public",
    "description": "Updates satellite position to position in given time.",
    "lineNumber": 241,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "datetime",
        "description": "Javascript date object."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "mapPositionToRange",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#mapPositionToRange",
    "access": "public",
    "description": "Remaps position value into displayable values in coords used by viro react.",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} Remapped position in [Y, Z, X] format (Viro coords)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Position in [X, Y, Z] format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "Remapped position in [Y, Z, X] format (Viro coords)."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "formatSelectedDataForModal",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#formatSelectedDataForModal",
    "access": "public",
    "description": "Formats given data to strings with correct units.",
    "lineNumber": 285,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, string>} Dictionary with data correctly formated for display. "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object<string, any>"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Dictionary with data to be formated."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": "Dictionary with data correctly formated for display."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "getDataForInfoModal",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#getDataForInfoModal",
    "access": "public",
    "description": "Calculates data needed in information modal window.",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object<string, any>} Dictionary of formated data for usage directly in info modal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object<string, any>"
      ],
      "spread": false,
      "description": "Dictionary of formated data for usage directly in info modal"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "getOrbitTime",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#getOrbitTime",
    "access": "public",
    "description": "Calculates orbit time of satellite in minutes",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Orbit time in minutes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Orbit time in minutes"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "getPointsForOrbit",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#getPointsForOrbit",
    "access": "public",
    "description": "Calculates points through one satellite orbit in future (first point is duplicatedat the edn of array).",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>} Array of [x, y, z] positions of points."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "numSegments",
        "description": "Number of points (segments) in one orbit."
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "currentDate",
        "description": "Current date / starting date of orbit."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": "Array of [x, y, z] positions of points."
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "getIntlDes",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#getIntlDes",
    "access": "public",
    "description": "Composes International Designator of satellite.",
    "lineNumber": 376,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} ITLDES of satellite"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "ITLDES of satellite"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "deg_to_dms",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#deg_to_dms",
    "access": "public",
    "description": "Converts degrees to d° m' s\" format.\nhttps://stackoverflow.com/questions/5786025/decimal-degrees-to-degrees-minutes-and-seconds-in-javascript/5786627#5786627",
    "lineNumber": 397,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Formated degree value (d° m' s\")"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deg",
        "description": "Value in degrees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Formated degree value (d° m' s\")"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "radians_to_degrees",
    "memberof": "satviz/js/SatelliteObject.js~SatelliteObject",
    "static": false,
    "longname": "satviz/js/SatelliteObject.js~SatelliteObject#radians_to_degrees",
    "access": "public",
    "description": "Converts radian value to degree value.",
    "lineNumber": 422,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Value in degrees"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radians",
        "description": "Value in radians"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Value in degrees"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "satviz/js/SpaceTrack.js",
    "content": "/** \r\n *  @fileOverview Simple class for retrieving data from space-track.org website.\r\n *\r\n *  @author       Vojtěch Pospíšil\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n* Credentials used for logging in.\r\n* @constant\r\n*\r\n* @type {Object<string, string>}\r\n*/\r\nconst CREDENTIALS = {\r\n    username: 'pospivo1@fel.cvut.cz',\r\n    password: '!6cpBH97VSniwT8'\r\n}\r\n\r\n/**\r\n* URL addreses used by space-track.org API.\r\n* @constant\r\n*\r\n* @type {Object<string, string>}\r\n*/\r\nconst API = {\r\n    dataFirst: \"https://www.space-track.org/basicspacedata/query/class/tle_latest/ORDINAL/1/NORAD_CAT_ID/\",\r\n    dataSecond: \"/orderby/TLE_LINE1 ASC/format/tle\",\r\n\r\n    loginURL: \"https://www.space-track.org/ajaxauth/login\",\r\n}\r\n\r\n/**\r\n * A class representing space-track.org data getter.\r\n */\r\nexport default class SpaceTrack {\r\n\r\n    /**\r\n     * Takes array of satellite IDs and returns TLE records for them.\r\n     * \r\n     * @async\r\n     * @param {Array.<string>} idArray Array of satellite IDs\r\n     * \r\n     * @returns {string} String of TLE records\r\n     */\r\n    getTLEs = async (idArray) => {\r\n        let idString = this.convertIDs(idArray);\r\n\r\n        const request = new Request(API.loginURL, {\r\n            method: 'POST',\r\n            credentials: 'include',\r\n            body: JSON.stringify({\r\n                identity: CREDENTIALS.username,\r\n                password: CREDENTIALS.password,\r\n                query: API.dataFirst + idString + API.dataSecond\r\n            }),\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n        });\r\n\r\n        try {\r\n            let response = await fetch(request);\r\n            let data = await response.text();\r\n\r\n            return data;\r\n        } catch (error) {\r\n            console.log(\"Something bad happened in await request process.\");\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Takes array of IDs and converts them to comma separated values string\r\n     * \r\n     * @param {Array.<string>} IDs - Satellite IDs \r\n     * \r\n     * @returns {string} Converted values\r\n     */\r\n    convertIDs = (IDs) => {\r\n        let ret = '';\r\n\r\n        if (Array.isArray(IDs) && IDs.length > 0) {\r\n            for (var i = 0; i < IDs.length; i++) {\r\n                let element = IDs[i];\r\n\r\n                ret += element;\r\n\r\n                if (i != (IDs.length - 1)) {\r\n                    ret += ',';\r\n                }\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Vojcek/Desktop/BP/CODES/satviz/js/SpaceTrack.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "variable",
    "name": "CREDENTIALS",
    "memberof": "satviz/js/SpaceTrack.js",
    "static": true,
    "longname": "satviz/js/SpaceTrack.js~CREDENTIALS",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SpaceTrack.js",
    "importStyle": null,
    "description": "Credentials used for logging in.",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object<string, string>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "API",
    "memberof": "satviz/js/SpaceTrack.js",
    "static": true,
    "longname": "satviz/js/SpaceTrack.js~API",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/js/SpaceTrack.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"dataFirst\": string, \"dataSecond\": string, \"loginURL\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "SpaceTrack",
    "memberof": "satviz/js/SpaceTrack.js",
    "static": true,
    "longname": "satviz/js/SpaceTrack.js~SpaceTrack",
    "access": "public",
    "export": true,
    "importPath": "satviz/satviz/js/SpaceTrack.js",
    "importStyle": "SpaceTrack",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "getTLEs",
    "memberof": "satviz/js/SpaceTrack.js~SpaceTrack",
    "static": false,
    "longname": "satviz/js/SpaceTrack.js~SpaceTrack#getTLEs",
    "access": "public",
    "description": "Takes array of satellite IDs and returns TLE records for them.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} String of TLE records"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "idArray",
        "description": "Array of satellite IDs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "String of TLE records"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "convertIDs",
    "memberof": "satviz/js/SpaceTrack.js~SpaceTrack",
    "static": false,
    "longname": "satviz/js/SpaceTrack.js~SpaceTrack#convertIDs",
    "access": "public",
    "description": "Takes array of IDs and converts them to comma separated values string",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Converted values"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "IDs",
        "description": "Satellite IDs"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Converted values"
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "satviz/utils/coordsConverter.js",
    "content": "/** \r\n *  @fileOverview Simple class for converting cities locations to ECI coordinates.\r\n *\r\n *  @author       Vojtěch Pospíšil\r\n */\r\n\r\nvar satellite = require('satellite.js');\r\n\r\n/**\r\n * Class representing converter of geodetic coordinates of cities to ECI coordinates.\r\n */\r\nexport default class CoordConverter {\r\n    constructor() {\r\n        /**\r\n         * Names of cities to be converted\r\n         * @type {Array.<string>}\r\n         */\r\n        this.cities = [\r\n            \"schriever\",\r\n            \"vandenberg\",\r\n            \"cape\",\r\n            \"ascension\",\r\n            \"diego\",\r\n            \"kwajalein\",\r\n            \"hawaii\",\r\n            \"greenland\",\r\n            \"hampshire\",\r\n            \"britain\",\r\n            \"guam\",\r\n            \"alaska\",\r\n            \"washington\",\r\n            \"ecuador\",\r\n            \"uruguay\",\r\n            \"africa\",\r\n            \"bahrain\",\r\n            \"korea\",\r\n            \"australia\",\r\n            \"zealand\"\r\n        ];\r\n\r\n        /** \r\n         * Dictionary of latitudes of cities locations\r\n         * @type {Object<string, number>}\r\n         */\r\n        this.latitudes = {\r\n            \"schriever\": 38.800487,\r\n            \"vandenberg\": 34.751841,\r\n            \"cape\": 28.491770,\r\n            \"ascension\": -7.943064,\r\n            \"diego\": -7.315041,\r\n            \"kwajalein\": 8.720267,\r\n            \"hawaii\": 20.491747,\r\n            \"greenland\": 76.515851,\r\n            \"hampshire\": 43.845083,\r\n            \"britain\": 51.901636,\r\n            \"guam\": 13.419102,\r\n            \"alaska\": 61.777863,\r\n            \"washington\": 38.921486,\r\n            \"ecuador\": -0.975709,\r\n            \"uruguay\": -33.352731,\r\n            \"africa\": -19.392172,\r\n            \"bahrain\": 26.015521,\r\n            \"korea\": 37.129097,\r\n            \"australia\": -33.805079,\r\n            \"zealand\": -41.957162\r\n        };\r\n\r\n        /** \r\n         * Dictionary of longitudes of cities locations\r\n         * @type {Object<string, number>}\r\n         */\r\n        this.longitudes = {\r\n            \"schriever\": -104.522903,\r\n            \"vandenberg\": -120.520696,\r\n            \"cape\": -80.578600,\r\n            \"ascension\": -14.372331,\r\n            \"diego\": 72.444928,\r\n            \"kwajalein\": 167.729290,\r\n            \"hawaii\": -157.294502,\r\n            \"greenland\": -68.739511,\r\n            \"hampshire\": -71.669399,\r\n            \"britain\": -1.440593,\r\n            \"guam\": 144.741369,\r\n            \"alaska\": -146.905346,\r\n            \"washington\": -77.066804,\r\n            \"ecuador\": -78.587049,\r\n            \"uruguay\": -56.024181,\r\n            \"africa\": 23.563274,\r\n            \"bahrain\": 50.537233,\r\n            \"korea\": 127.773009,\r\n            \"australia\": 138.480160,\r\n            \"zealand\": 173.842508\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts city coordination specified in dictionaries in class into\r\n     * ECI coords and prints them into console.\r\n     */\r\n    convert = () => {\r\n        let geodetic = {\r\n            longitude: satellite.degreesToRadians(),\r\n            latitude: satellite.degreesToRadians(),\r\n            height: 0.8\r\n        };\r\n\r\n        let ecf = satellite.geodeticToEcf(geodetic);\r\n        \r\n        let gmst = satellite.gstime(new Date());\r\n        let eci = satellite.ecfToEci(ecf, gmst);\r\n\r\n        let result = {}\r\n        let date = new Date()\r\n        this.cities.forEach(element => {\r\n            let geodetic = {\r\n                longitude: satellite.degreesToRadians(this.longitudes[element]),\r\n                latitude: satellite.degreesToRadians(this.latitudes[element]),\r\n                height: 0.8\r\n            };\r\n\r\n            let ecf = satellite.geodeticToEcf(geodetic);\r\n            let gmst = satellite.gstime(date);\r\n            let eci = satellite.ecfToEci(ecf, gmst);\r\n\r\n            result[element] = eci;\r\n        });\r\n\r\n        console.log(JSON.stringify(result));\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Vojcek/Desktop/BP/CODES/satviz/utils/coordsConverter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "satellite",
    "memberof": "satviz/utils/coordsConverter.js",
    "static": true,
    "longname": "satviz/utils/coordsConverter.js~satellite",
    "access": "public",
    "export": false,
    "importPath": "satviz/satviz/utils/coordsConverter.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@fileOverview",
        "tagValue": "Simple class for converting cities locations to ECI coordinates."
      },
      {
        "tagName": "@author",
        "tagValue": "      Vojtěch Pospíšil"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "class",
    "name": "CoordConverter",
    "memberof": "satviz/utils/coordsConverter.js",
    "static": true,
    "longname": "satviz/utils/coordsConverter.js~CoordConverter",
    "access": "public",
    "export": true,
    "importPath": "satviz/satviz/utils/coordsConverter.js",
    "importStyle": "CoordConverter",
    "description": "Class representing converter of geodetic coordinates of cities to ECI coordinates.",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 203,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "satviz/utils/coordsConverter.js~CoordConverter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "satviz/utils/coordsConverter.js~CoordConverter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "cities",
    "memberof": "satviz/utils/coordsConverter.js~CoordConverter",
    "static": false,
    "longname": "satviz/utils/coordsConverter.js~CoordConverter#cities",
    "access": "public",
    "description": "Names of cities to be converted",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Array.<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "latitudes",
    "memberof": "satviz/utils/coordsConverter.js~CoordConverter",
    "static": false,
    "longname": "satviz/utils/coordsConverter.js~CoordConverter#latitudes",
    "access": "public",
    "description": "Dictionary of latitudes of cities locations",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "longitudes",
    "memberof": "satviz/utils/coordsConverter.js~CoordConverter",
    "static": false,
    "longname": "satviz/utils/coordsConverter.js~CoordConverter#longitudes",
    "access": "public",
    "description": "Dictionary of longitudes of cities locations",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Object<string, number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "convert",
    "memberof": "satviz/utils/coordsConverter.js~CoordConverter",
    "static": false,
    "longname": "satviz/utils/coordsConverter.js~CoordConverter#convert",
    "access": "public",
    "description": "Converts city coordination specified in dictionaries in class into\nECI coords and prints them into console.",
    "lineNumber": 100,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# satviz\r\n",
    "longname": "C:\\Users\\Vojcek\\Desktop\\BP\\CODES\\satviz\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"satviz\",\r\n  \"version\": \"0.0.1\",\r\n  \"private\": true,\r\n  \"scripts\": {\r\n    \"start\": \"node node_modules/react-native/local-cli/cli.js start\",\r\n    \"test\": \"jest\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@react-native-community/async-storage\": \"^1.9.0\",\r\n    \"@react-native-community/slider\": \"^1.1.4\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"jetifier\": \"^1.6.5\",\r\n    \"react\": \"16.8.3\",\r\n    \"react-native\": \"0.59.3\",\r\n    \"react-native-flash-message\": \"^0.1.15\",\r\n    \"react-native-modal\": \"^11.5.4\",\r\n    \"react-native-sectioned-multi-select\": \"^0.7.6\",\r\n    \"react-native-sliding-up-down-panels\": \"^1.0.0\",\r\n    \"react-native-vector-icons\": \"^6.6.0\",\r\n    \"react-viro\": \"2.17.0\",\r\n    \"satellite.js\": \"^4.0.0\",\r\n    \"timetravel\": \"^0.1.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.8.7\",\r\n    \"@babel/runtime\": \"^7.8.7\",\r\n    \"babel-jest\": \"^25.1.0\",\r\n    \"jest\": \"^25.1.0\",\r\n    \"metro-react-native-babel-preset\": \"^0.58.0\",\r\n    \"react-test-renderer\": \"16.8.3\"\r\n  },\r\n  \"jest\": {\r\n    \"preset\": \"react-native\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\Vojcek\\Desktop\\BP\\CODES\\satviz\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]